// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using STTDataAnalyzer.Models.PlayerData;
//
//    var PlayerData = PlayerData.FromJson(jsonString);

using System;
using System.Collections.Generic;

using System.Globalization;
using System.Windows.Forms;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace STTDataAnalyzer.Models.PlayerData
{
    public partial class PlayerData
    {
        [JsonProperty("action")]
        public string Action { get; set; }

        [JsonProperty("player")]
        public Player Player { get; set; }

        [JsonProperty("item_archetype_cache")]
        public ItemArchetypeCache ItemArchetypeCache { get; set; }

        [JsonProperty("forte_root")]
        public ForteRoot ForteRoot { get; set; }

        [JsonProperty("crew_crafting_root")]
        public CrewCraftingRoot CrewCraftingRoot { get; set; }

        [JsonProperty("scanning_root")]
        public ScanningRoot ScanningRoot { get; set; }
    }

    public partial class CrewCraftingRoot
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("config")]
        public CrewCraftingRootConfig Config { get; set; }

        [JsonProperty("env")]
        public CrewCraftingClass Env { get; set; }

        [JsonProperty("energy")]
        public Energy Energy { get; set; }
    }

    public partial class CrewCraftingRootConfig
    {
        [JsonProperty("cost_discount_by_pool_size")]
        public Dictionary<string, double> CostDiscountByPoolSize { get; set; }

        [JsonProperty("cost_by_rarity")]
        public Dictionary<string, CostByRarity> CostByRarity { get; set; }

        [JsonProperty("ism_subcoin_cost_to_open_crate")]
        public long IsmSubcoinCostToOpenCrate { get; set; }
    }

    public partial class CostByRarity
    {
        [JsonProperty("credits")]
        public long Credits { get; set; }

        [JsonProperty("energy")]
        public long Energy { get; set; }
    }

    public partial class Energy
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("regeneration")]
        public Regeneration Regeneration { get; set; }

        [JsonProperty("regenerated_at")]
        public double RegeneratedAt { get; set; }

        [JsonProperty("coupons")]
        public long Coupons { get; set; }
    }

    public partial class Regeneration
    {
        [JsonProperty("increment")]
        public long Increment { get; set; }

        [JsonProperty("seconds")]
        public long Seconds { get; set; }

        [JsonProperty("amount")]
        public long Amount { get; set; }
    }

    public partial class CrewCraftingClass
    {
        [JsonProperty("enabled")]
        public bool Enabled { get; set; }

        [JsonProperty("crew_source_stores")]
        public List<string> CrewSourceStores { get; set; }
    }

    public partial class ForteRoot
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("items")]
        public List<StoredImmortalElement> Items { get; set; }
    }

    public partial class StoredImmortalElement
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }
    }

    public partial class ItemArchetypeCache
    {
        [JsonProperty("archetypes")]
        public List<Archetype> Archetypes { get; set; }
    }

    public partial class Archetype
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("icon")]
        public PortraitClass Icon { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }

        [JsonProperty("recipe", NullValueHandling = NullValueHandling.Ignore)]
        public Recipe Recipe { get; set; }

        [JsonProperty("item_sources")]
        public List<ItemSource> ItemSources { get; set; }

        [JsonProperty("bonuses", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, long> Bonuses { get; set; }

        [JsonProperty("short_name", NullValueHandling = NullValueHandling.Ignore)]
        public string ShortName { get; set; }
    }

    public partial class PortraitClass
    {
        [JsonProperty("file")]
        public string File { get; set; }
    }

    public partial class ItemSource
    {
        [JsonProperty("challenge_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? ChallengeId { get; set; }

        [JsonProperty("challenge_skill", NullValueHandling = NullValueHandling.Ignore)]
        public ChallengeSkillEnum? ChallengeSkill { get; set; }

        [JsonProperty("challenge_difficulty", NullValueHandling = NullValueHandling.Ignore)]
        public long? ChallengeDifficulty { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("energy_quotient")]
        public double EnergyQuotient { get; set; }

        [JsonProperty("chance_grade")]
        public long ChanceGrade { get; set; }

        [JsonProperty("place", NullValueHandling = NullValueHandling.Ignore)]
        public string Place { get; set; }

        [JsonProperty("mission", NullValueHandling = NullValueHandling.Ignore)]
        public long? Mission { get; set; }

        [JsonProperty("dispute", NullValueHandling = NullValueHandling.Ignore)]
        public long? Dispute { get; set; }

        [JsonProperty("mastery", NullValueHandling = NullValueHandling.Ignore)]
        public long? Mastery { get; set; }
    }

    public partial class Recipe
    {
        [JsonProperty("demands")]
        public List<Demand> Demands { get; set; }

        [JsonProperty("validity_hash")]
        public string ValidityHash { get; set; }
    }

    public partial class Demand
    {
        [JsonProperty("archetype_id")]
        public long ArchetypeId { get; set; }

        [JsonProperty("count")]
        public long Count { get; set; }
    }

    public partial class Player
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("dbid")]
        public long Dbid { get; set; }

        [JsonProperty("lang")]
        public string Lang { get; set; }

        [JsonProperty("timezone")]
        public string Timezone { get; set; }

        [JsonProperty("locale")]
        public string Locale { get; set; }

        [JsonProperty("display_name")]
        public string DisplayName { get; set; }

        [JsonProperty("money")]
        public long Money { get; set; }

        [JsonProperty("premium_purchasable")]
        public long PremiumPurchasable { get; set; }

        [JsonProperty("premium_earnable")]
        public long PremiumEarnable { get; set; }

        [JsonProperty("honor")]
        public long Honor { get; set; }

        [JsonProperty("shuttle_rental_tokens")]
        public long ShuttleRentalTokens { get; set; }

        [JsonProperty("vip_points")]
        public long VipPoints { get; set; }

        [JsonProperty("vip_level")]
        public long VipLevel { get; set; }

        [JsonProperty("currency_exchanges")]
        public List<CurrencyExchange> CurrencyExchanges { get; set; }

        [JsonProperty("replicator_uses_today")]
        public long ReplicatorUsesToday { get; set; }

        [JsonProperty("replicator_limit")]
        public long ReplicatorLimit { get; set; }

        [JsonProperty("replicator_ration_types")]
        public List<ReplicatorRationType> ReplicatorRationTypes { get; set; }

        [JsonProperty("character")]
        public Character Character { get; set; }

        [JsonProperty("fleet")]
        public Fleet Fleet { get; set; }

        [JsonProperty("squad")]
        public Squad Squad { get; set; }

        [JsonProperty("mailbox")]
        public Mailbox Mailbox { get; set; }

        [JsonProperty("fleet_invite")]
        public FleetInvite FleetInvite { get; set; }

        [JsonProperty("entitlements")]
        public Entitlements Entitlements { get; set; }

        [JsonProperty("chats")]
        public Chats Chats { get; set; }

        [JsonProperty("environment")]
        public Environment Environment { get; set; }

        [JsonProperty("motd")]
        public Motd Motd { get; set; }

        [JsonProperty("npe_complete")]
        public bool NpeComplete { get; set; }

        [JsonProperty("community_links")]
        public List<CommunityLink> CommunityLinks { get; set; }

        [JsonProperty("legal_update")]
        public bool LegalUpdate { get; set; }

        [JsonProperty("legal_popup_variant")]
        public long LegalPopupVariant { get; set; }

        [JsonProperty("ads_consent_required")]
        public bool AdsConsentRequired { get; set; }

        [JsonProperty("consent")]
        public bool Consent { get; set; }

        [JsonProperty("ccpa_opted_out")]
        public bool CcpaOptedOut { get; set; }

        [JsonProperty("u_13")]
        public bool U13 { get; set; }
    }

    public partial class Character
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("display_name")]
        public string DisplayName { get; set; }

        [JsonProperty("using_default_name")]
        public bool UsingDefaultName { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("max_level")]
        public long MaxLevel { get; set; }

        [JsonProperty("xp")]
        public long Xp { get; set; }

        [JsonProperty("xp_for_current_level")]
        public long XpForCurrentLevel { get; set; }

        [JsonProperty("xp_for_next_level")]
        public long XpForNextLevel { get; set; }

        [JsonProperty("location")]
        public Ation Location { get; set; }

        [JsonProperty("destination")]
        public Ation Destination { get; set; }

        [JsonProperty("navmap")]
        public Navmap Navmap { get; set; }

        [JsonProperty("accepted_missions")]
        public List<AcceptedMission> AcceptedMissions { get; set; }

        [JsonProperty("active_conflict")]
        public object ActiveConflict { get; set; }

        [JsonProperty("shuttle_bays")]
        public long ShuttleBays { get; set; }

        [JsonProperty("next_shuttle_bay_cost")]
        public object NextShuttleBayCost { get; set; }

        [JsonProperty("can_purchase_shuttle_bay")]
        public bool CanPurchaseShuttleBay { get; set; }

        [JsonProperty("crew_avatar")]
        public CrewAvatar CrewAvatar { get; set; }

        [JsonProperty("stored_immortals")]
        public List<StoredImmortalElement> StoredImmortals { get; set; }

        [JsonProperty("replay_energy_max")]
        public long ReplayEnergyMax { get; set; }

        [JsonProperty("replay_energy_rate")]
        public long ReplayEnergyRate { get; set; }

        [JsonProperty("seconds_from_replay_energy_basis")]
        public long SecondsFromReplayEnergyBasis { get; set; }

        [JsonProperty("replay_energy_overflow")]
        public long ReplayEnergyOverflow { get; set; }

        [JsonProperty("boost_windows")]
        public List<BoostWindow> BoostWindows { get; set; }

        [JsonProperty("seconds_from_last_boost_claim")]
        public double SecondsFromLastBoostClaim { get; set; }

        [JsonProperty("video_ad_chroniton_boost_reward")]
        public VideoAdChronitonBoostRewardClass VideoAdChronitonBoostReward { get; set; }

        [JsonProperty("cadet_tickets")]
        public Tickets CadetTickets { get; set; }

        [JsonProperty("pvp_tickets")]
        public Tickets PvpTickets { get; set; }

        [JsonProperty("event_tickets")]
        public Tickets EventTickets { get; set; }

        [JsonProperty("cadet_schedule")]
        public CadetSchedule CadetSchedule { get; set; }

        [JsonProperty("pvp_divisions")]
        public List<PvpDivision> PvpDivisions { get; set; }

        [JsonProperty("pvp_timer")]
        public PvpTimer PvpTimer { get; set; }

        [JsonProperty("crew")]
        public List<Crew> Crew { get; set; }

        [JsonProperty("items")]
        public List<PurpleItem> Items { get; set; }

        [JsonProperty("crew_borrows")]
        public List<object> CrewBorrows { get; set; }

        [JsonProperty("crew_shares")]
        public List<object> CrewShares { get; set; }

        [JsonProperty("crew_limit")]
        public long CrewLimit { get; set; }

        [JsonProperty("crew_limit_increase_per_purchase")]
        public long CrewLimitIncreasePerPurchase { get; set; }

        [JsonProperty("next_crew_limit_increase_cost")]
        public Cost NextCrewLimitIncreaseCost { get; set; }

        [JsonProperty("can_purchase_crew_limit_increase")]
        public bool CanPurchaseCrewLimitIncrease { get; set; }

        [JsonProperty("item_limit")]
        public long ItemLimit { get; set; }

        [JsonProperty("alert_item_limit")]
        public long AlertItemLimit { get; set; }

        [JsonProperty("ships")]
        public List<ShipElement> Ships { get; set; }

        [JsonProperty("current_ship_id")]
        public long CurrentShipId { get; set; }

        [JsonProperty("shuttle_adventures")]
        public List<object> ShuttleAdventures { get; set; }

        [JsonProperty("factions")]
        public List<Faction> Factions { get; set; }

        [JsonProperty("disputes")]
        public List<object> Disputes { get; set; }

        [JsonProperty("tng_the_game_level")]
        public long TngTheGameLevel { get; set; }

        [JsonProperty("open_packs")]
        public List<object> OpenPacks { get; set; }

        [JsonProperty("daily_activities")]
        public List<DailyActivity> DailyActivities { get; set; }

        [JsonProperty("next_daily_activity_reset")]
        public double NextDailyActivityReset { get; set; }

        [JsonProperty("next_starbase_donation_reset")]
        public double NextStarbaseDonationReset { get; set; }

        [JsonProperty("fleet_activities")]
        public List<FleetActivity> FleetActivities { get; set; }

        [JsonProperty("next_fleet_activity_reset")]
        public double NextFleetActivityReset { get; set; }

        [JsonProperty("freestanding_quests")]
        public List<object> FreestandingQuests { get; set; }

        [JsonProperty("daily_rewards_state")]
        public DailyRewardsState DailyRewardsState { get; set; }

        [JsonProperty("events")]
        public List<Event> Events { get; set; }

        [JsonProperty("dispute_histories")]
        public List<DisputeHistory> DisputeHistories { get; set; }

        [JsonProperty("stimpack")]
        public object Stimpack { get; set; }

        [JsonProperty("tutorials")]
        public List<Tutorial> Tutorials { get; set; }

        [JsonProperty("location_channel_prefix")]
        public string LocationChannelPrefix { get; set; }

        [JsonProperty("honor_reward_by_rarity")]
        public List<long> HonorRewardByRarity { get; set; }

        [JsonProperty("voyage_descriptions")]
        public List<VoyageDescription> VoyageDescriptions { get; set; }

        [JsonProperty("voyage")]
        public List<Voyage> Voyage { get; set; }

        [JsonProperty("voyage_summaries")]
        public VoyageSummaries VoyageSummaries { get; set; }

        [JsonProperty("cryo_collections")]
        public List<CryoCollection> CryoCollections { get; set; }

        [JsonProperty("crew_collection_buffs")]
        public List<Buff> CrewCollectionBuffs { get; set; }

        [JsonProperty("collection_buffs_cap_hash")]
        public Dictionary<string, double> CollectionBuffsCapHash { get; set; }

        [JsonProperty("starbase_buffs")]
        public List<Buff> StarbaseBuffs { get; set; }

        [JsonProperty("starbase_buffs_cap_hash")]
        public Dictionary<string, double> StarbaseBuffsCapHash { get; set; }

        [JsonProperty("all_buffs_cap_hash")]
        public Dictionary<string, double> AllBuffsCapHash { get; set; }

        [JsonProperty("all_buffs")]
        public List<Buff> AllBuffs { get; set; }

        [JsonProperty("total_marketplace_claimables")]
        public long TotalMarketplaceClaimables { get; set; }

        [JsonProperty("seasons")]
        public List<Season> Seasons { get; set; }
    }

    public partial class AcceptedMission
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("episode")]
        public long Episode { get; set; }

        [JsonProperty("episode_title")]
        public string EpisodeTitle { get; set; }

        [JsonProperty("episode_portrait")]
        public PortraitClass EpisodePortrait { get; set; }

        [JsonProperty("marker")]
        public List<long> Marker { get; set; }

        [JsonProperty("marker_icon")]
        public PortraitClass MarkerIcon { get; set; }

        [JsonProperty("exclude_from_timeline")]
        public bool? ExcludeFromTimeline { get; set; }

        [JsonProperty("stars_earned")]
        public long StarsEarned { get; set; }

        [JsonProperty("total_stars")]
        public long TotalStars { get; set; }

        [JsonProperty("accepted")]
        public bool Accepted { get; set; }

        [JsonProperty("state")]
        public long State { get; set; }

        [JsonProperty("main_story")]
        public bool MainStory { get; set; }
    }

    public partial class Buff
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("short_name")]
        public string ShortName { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("icon")]
        public PortraitClass Icon { get; set; }

        [JsonProperty("operator")]
        public Operator Operator { get; set; }

        [JsonProperty("value")]
        public double Value { get; set; }

        [JsonProperty("stat")]
        public string Stat { get; set; }

        [JsonProperty("source")]
        public Source Source { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }
    }

    public partial class BoostWindow
    {
        [JsonProperty("window")]
        public List<long> Window { get; set; }

        [JsonProperty("reward")]
        public VideoAdChronitonBoostRewardClass Reward { get; set; }
    }

    public partial class VideoAdChronitonBoostRewardClass
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public VideoAdChronitonBoostRewardSymbol Symbol { get; set; }

        [JsonProperty("name")]
        public FullNameEnum Name { get; set; }

        [JsonProperty("full_name")]
        public FullNameEnum FullName { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("icon")]
        public VideoAdChronitonBoostRewardIcon Icon { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }
    }

    public partial class VideoAdChronitonBoostRewardIcon
    {
        [JsonProperty("file")]
        public string File { get; set; }

        [JsonProperty("atlas_info")]
        public AtlasInfo? AtlasInfo { get; set; }
    }

    public partial class CadetSchedule
    {
        [JsonProperty("day")]
        public long Day { get; set; }

        [JsonProperty("schedule")]
        public List<Schedule> Schedule { get; set; }

        [JsonProperty("missions")]
        public List<Mission> Missions { get; set; }

        [JsonProperty("current")]
        public long Current { get; set; }

        [JsonProperty("ends_in")]
        public double EndsIn { get; set; }

        [JsonProperty("next")]
        public long Next { get; set; }

        [JsonProperty("next_starts_in")]
        public double NextStartsIn { get; set; }
    }

    public partial class Mission
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("speaker")]
        public string Speaker { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("portrait")]
        public PortraitClass Portrait { get; set; }

        [JsonProperty("image")]
        public PortraitClass Image { get; set; }

        [JsonProperty("image_small")]
        public PortraitClass ImageSmall { get; set; }

        [JsonProperty("requirement")]
        public string Requirement { get; set; }
    }

    public partial class Schedule
    {
        [JsonProperty("day")]
        public long Day { get; set; }

        [JsonProperty("mission")]
        public long Mission { get; set; }
    }

    public partial class Tickets
    {
        [JsonProperty("current")]
        public long Current { get; set; }

        [JsonProperty("max")]
        public long Max { get; set; }

        [JsonProperty("spend_in")]
        public long SpendIn { get; set; }

        [JsonProperty("reset_in")]
        public double ResetIn { get; set; }
    }

    public partial class Crew
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("short_name")]
        public string ShortName { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("archetype_id")]
        public long ArchetypeId { get; set; }

        [JsonProperty("xp")]
        public long Xp { get; set; }

        [JsonProperty("xp_for_current_level")]
        public long XpForCurrentLevel { get; set; }

        [JsonProperty("xp_for_next_level")]
        public long XpForNextLevel { get; set; }

        [JsonProperty("max_xp")]
        public long MaxXp { get; set; }

        [JsonProperty("favorite")]
        public bool Favorite { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("in_buy_back_state")]
        public bool InBuyBackState { get; set; }

        [JsonProperty("max_level")]
        public long MaxLevel { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }

        [JsonProperty("max_rarity")]
        public long MaxRarity { get; set; }

        [JsonProperty("equipment_rank")]
        public long EquipmentRank { get; set; }

        [JsonProperty("max_equipment_rank")]
        public long MaxEquipmentRank { get; set; }

        [JsonProperty("equipment_slots")]
        public List<EquipmentSlot> EquipmentSlots { get; set; }

        [JsonProperty("equipment")]
        public List<List<long>> Equipment { get; set; }

        [JsonProperty("icon")]
        public PortraitClass Icon { get; set; }

        [JsonProperty("portrait")]
        public PortraitClass Portrait { get; set; }

        [JsonProperty("full_body")]
        public PortraitClass FullBody { get; set; }

        [JsonProperty("voice_over")]
        public string VoiceOver { get; set; }

        [JsonProperty("expires_in")]
        public object ExpiresIn { get; set; }

        [JsonProperty("active_status")]
        public long ActiveStatus { get; set; }

        [JsonProperty("active_id")]
        public long? ActiveId { get; set; }

        [JsonProperty("active_index")]
        public long ActiveIndex { get; set; }

        [JsonProperty("passive_status")]
        public long PassiveStatus { get; set; }

        [JsonProperty("passive_id")]
        public long? PassiveId { get; set; }

        [JsonProperty("passive_index")]
        public long PassiveIndex { get; set; }

        [JsonProperty("traits")]
        public List<string> Traits { get; set; }

        [JsonProperty("traits_hidden")]
        public List<string> TraitsHidden { get; set; }

        [JsonProperty("skills")]
        public BaseSkills Skills { get; set; }

        [JsonProperty("base_skills")]
        public BaseSkills BaseSkills { get; set; }

        [JsonProperty("ship_battle")]
        public ShipBattle ShipBattle { get; set; }

        [JsonProperty("action")]
        public ActionElement Action { get; set; }

        [JsonProperty("default_avatar")]
        public bool DefaultAvatar { get; set; }

        [JsonProperty("cross_fuse_targets")]
        public List<string> CrossFuseTargets { get; set; }

        [JsonProperty("cap_achiever")]
        public CapAchiever CapAchiever { get; set; }
    }

    public partial class ActionElement
    {
        [JsonProperty("bonus_amount")]
        public long BonusAmount { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("cooldown")]
        public long Cooldown { get; set; }

        [JsonProperty("initial_cooldown")]
        public long InitialCooldown { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("bonus_type")]
        public long BonusType { get; set; }

        [JsonProperty("crew")]
        public long? Crew { get; set; }

        [JsonProperty("crew_archetype_id")]
        public long? CrewArchetypeId { get; set; }

        [JsonProperty("icon")]
        public PortraitClass Icon { get; set; }

        [JsonProperty("ability", NullValueHandling = NullValueHandling.Ignore)]
        public Ability Ability { get; set; }

        [JsonProperty("special")]
        public bool Special { get; set; }

        [JsonProperty("charge_phases", NullValueHandling = NullValueHandling.Ignore)]
        public List<ChargePhase> ChargePhases { get; set; }

        [JsonProperty("limit", NullValueHandling = NullValueHandling.Ignore)]
        public long? Limit { get; set; }

        [JsonProperty("penalty", NullValueHandling = NullValueHandling.Ignore)]
        public Penalty Penalty { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public long? Status { get; set; }
    }

    public partial class Ability
    {
        [JsonProperty("condition")]
        public long Condition { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("amount")]
        public long Amount { get; set; }
    }

    public partial class ChargePhase
    {
        [JsonProperty("charge_time")]
        public long ChargeTime { get; set; }

        [JsonProperty("bonus_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? BonusAmount { get; set; }

        [JsonProperty("cooldown", NullValueHandling = NullValueHandling.Ignore)]
        public long? Cooldown { get; set; }

        [JsonProperty("ability_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? AbilityAmount { get; set; }

        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public long? Duration { get; set; }
    }

    public partial class Penalty
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("amount")]
        public long Amount { get; set; }
    }

    public partial class BaseSkills
    {
        [JsonProperty("command_skill", NullValueHandling = NullValueHandling.Ignore)]
        public Skill CommandSkill { get; set; }

        [JsonProperty("security_skill", NullValueHandling = NullValueHandling.Ignore)]
        public Skill SecuritySkill { get; set; }

        [JsonProperty("diplomacy_skill", NullValueHandling = NullValueHandling.Ignore)]
        public Skill DiplomacySkill { get; set; }

        [JsonProperty("medicine_skill", NullValueHandling = NullValueHandling.Ignore)]
        public Skill MedicineSkill { get; set; }

        [JsonProperty("science_skill", NullValueHandling = NullValueHandling.Ignore)]
        public Skill ScienceSkill { get; set; }

        [JsonProperty("engineering_skill", NullValueHandling = NullValueHandling.Ignore)]
        public Skill EngineeringSkill { get; set; }
    }

    public partial class Skill
    {
        [JsonProperty("core")]
        public long Core { get; set; }

        [JsonProperty("range_min")]
        public long RangeMin { get; set; }

        [JsonProperty("range_max")]
        public long RangeMax { get; set; }

        [JsonProperty("skill", NullValueHandling = NullValueHandling.Ignore)]
        public ChallengeSkillEnum? SkillSkill { get; set; }
    }

    public partial class CapAchiever
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("date")]
        public long Date { get; set; }
    }

    public partial class EquipmentSlot
    {
        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("archetype")]
        public long Archetype { get; set; }
    }

    public partial class ShipBattle
    {
        [JsonProperty("accuracy", NullValueHandling = NullValueHandling.Ignore)]
        public long? Accuracy { get; set; }

        [JsonProperty("evasion", NullValueHandling = NullValueHandling.Ignore)]
        public long? Evasion { get; set; }

        [JsonProperty("crit_chance", NullValueHandling = NullValueHandling.Ignore)]
        public long? CritChance { get; set; }

        [JsonProperty("crit_bonus", NullValueHandling = NullValueHandling.Ignore)]
        public long? CritBonus { get; set; }
    }

    public partial class CrewAvatar
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("traits")]
        public List<object> Traits { get; set; }

        [JsonProperty("traits_hidden")]
        public List<string> TraitsHidden { get; set; }

        [JsonProperty("short_name")]
        public string ShortName { get; set; }

        [JsonProperty("max_rarity")]
        public long MaxRarity { get; set; }

        [JsonProperty("icon")]
        public PortraitClass Icon { get; set; }

        [JsonProperty("portrait")]
        public PortraitClass Portrait { get; set; }

        [JsonProperty("full_body")]
        public PortraitClass FullBody { get; set; }

        [JsonProperty("default_avatar")]
        public bool DefaultAvatar { get; set; }

        [JsonProperty("hide_from_cryo")]
        public bool HideFromCryo { get; set; }

        [JsonProperty("skills")]
        public List<object> Skills { get; set; }
    }

    public partial class CryoCollection
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("type_id")]
        public long TypeId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("image")]
        public string Image { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("progress")]
        public long Progress { get; set; }

        [JsonProperty("traits")]
        public List<string> Traits { get; set; }

        [JsonProperty("extra_crew")]
        public List<long> ExtraCrew { get; set; }

        [JsonProperty("claimable_milestone_index")]
        public long ClaimableMilestoneIndex { get; set; }

        [JsonProperty("milestone")]
        public CryoCollectionMilestone Milestone { get; set; }
    }

    public partial class CryoCollectionMilestone
    {
        [JsonProperty("rewards")]
        public List<MilestoneReward> Rewards { get; set; }

        [JsonProperty("goal")]
        public long Goal { get; set; }

        [JsonProperty("buffs")]
        public List<ReplicatorRationType> Buffs { get; set; }
    }

    public partial class ReplicatorRationType
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("symbol", NullValueHandling = NullValueHandling.Ignore)]
        public string Symbol { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("icon")]
        public PortraitClass Icon { get; set; }

        [JsonProperty("flavor", NullValueHandling = NullValueHandling.Ignore)]
        public string Flavor { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }

        [JsonProperty("item_sources", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> ItemSources { get; set; }

        [JsonProperty("full_name", NullValueHandling = NullValueHandling.Ignore)]
        public string FullName { get; set; }

        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Quantity { get; set; }

        [JsonProperty("item_type", NullValueHandling = NullValueHandling.Ignore)]
        public long? ItemType { get; set; }

        [JsonProperty("potential_rewards", NullValueHandling = NullValueHandling.Ignore)]
        public List<ReplicatorRationType> PotentialRewards { get; set; }

        [JsonProperty("bonuses", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, long> Bonuses { get; set; }
    }

    public partial class MilestoneReward
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("symbol", NullValueHandling = NullValueHandling.Ignore)]
        public VideoAdChronitonBoostRewardSymbol? Symbol { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleName? Name { get; set; }

        [JsonProperty("full_name", NullValueHandling = NullValueHandling.Ignore)]
        public FullNameEnum? FullName { get; set; }

        [JsonProperty("flavor", NullValueHandling = NullValueHandling.Ignore)]
        public string Flavor { get; set; }

        [JsonProperty("icon")]
        public VideoAdChronitonBoostRewardIcon Icon { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("rarity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Rarity { get; set; }

        [JsonProperty("potential_rewards", NullValueHandling = NullValueHandling.Ignore)]
        public List<ReplicatorRationType> PotentialRewards { get; set; }
    }

    public partial class DailyActivity
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("icon")]
        public VideoAdChronitonBoostRewardIcon Icon { get; set; }

        [JsonProperty("area")]
        public string Area { get; set; }

        [JsonProperty("weight")]
        public long Weight { get; set; }

        [JsonProperty("category")]
        public Category Category { get; set; }

        [JsonProperty("lifetime", NullValueHandling = NullValueHandling.Ignore)]
        public long? Lifetime { get; set; }

        [JsonProperty("rewards", NullValueHandling = NullValueHandling.Ignore)]
        public List<ReplicatorRationType> Rewards { get; set; }

        [JsonProperty("goal", NullValueHandling = NullValueHandling.Ignore)]
        public double? Goal { get; set; }

        [JsonProperty("min_level", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinLevel { get; set; }

        [JsonProperty("rarity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Rarity { get; set; }

        [JsonProperty("progress", NullValueHandling = NullValueHandling.Ignore)]
        public double? Progress { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class DailyRewardsState
    {
        [JsonProperty("seconds_until_next_reward")]
        public long SecondsUntilNextReward { get; set; }

        [JsonProperty("today_reward_day_index")]
        public long TodayRewardDayIndex { get; set; }

        [JsonProperty("season_points_per_day")]
        public long SeasonPointsPerDay { get; set; }

        [JsonProperty("ism_subcoin_per_day")]
        public long IsmSubcoinPerDay { get; set; }

        [JsonProperty("reward_days")]
        public List<RewardDay> RewardDays { get; set; }
    }

    public partial class RewardDay
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("rewards")]
        public List<RewardDayReward> Rewards { get; set; }

        [JsonProperty("double_at_vip", NullValueHandling = NullValueHandling.Ignore)]
        public long? DoubleAtVip { get; set; }
    }

    public partial class RewardDayReward
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("full_name")]
        public string FullName { get; set; }

        [JsonProperty("flavor", NullValueHandling = NullValueHandling.Ignore)]
        public string Flavor { get; set; }

        [JsonProperty("icon")]
        public VideoAdChronitonBoostRewardIcon Icon { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("portrait", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass Portrait { get; set; }

        [JsonProperty("full_body", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass FullBody { get; set; }

        [JsonProperty("skills", NullValueHandling = NullValueHandling.Ignore)]
        public RewardSkills Skills { get; set; }

        [JsonProperty("traits", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Traits { get; set; }

        [JsonProperty("action", NullValueHandling = NullValueHandling.Ignore)]
        public FeaturedCrewAction Action { get; set; }

        [JsonProperty("ship", NullValueHandling = NullValueHandling.Ignore)]
        public RewardShip Ship { get; set; }

        [JsonProperty("item_type", NullValueHandling = NullValueHandling.Ignore)]
        public long? ItemType { get; set; }
    }

    public partial class FeaturedCrewAction
    {
        [JsonProperty("bonus_amount")]
        public long BonusAmount { get; set; }

        [JsonProperty("charge_phases", NullValueHandling = NullValueHandling.Ignore)]
        public List<ChargePhase> ChargePhases { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("cooldown")]
        public long Cooldown { get; set; }

        [JsonProperty("initial_cooldown")]
        public long InitialCooldown { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("bonus_type")]
        public long BonusType { get; set; }

        [JsonProperty("crew")]
        public long Crew { get; set; }

        [JsonProperty("crew_archetype_id")]
        public long CrewArchetypeId { get; set; }

        [JsonProperty("icon")]
        public PortraitClass Icon { get; set; }

        [JsonProperty("ability", NullValueHandling = NullValueHandling.Ignore)]
        public Ability Ability { get; set; }

        [JsonProperty("special")]
        public bool Special { get; set; }

        [JsonProperty("penalty", NullValueHandling = NullValueHandling.Ignore)]
        public Penalty Penalty { get; set; }

        [JsonProperty("limit", NullValueHandling = NullValueHandling.Ignore)]
        public long? Limit { get; set; }
    }

    public partial class RewardShip
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("full_name")]
        public string FullName { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("icon")]
        public PortraitClass Icon { get; set; }

        [JsonProperty("shields")]
        public long Shields { get; set; }

        [JsonProperty("hull")]
        public long Hull { get; set; }

        [JsonProperty("attack")]
        public long Attack { get; set; }

        [JsonProperty("evasion")]
        public long Evasion { get; set; }

        [JsonProperty("accuracy")]
        public long Accuracy { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }
    }

    public partial class RewardSkills
    {
        [JsonProperty("science_skill", NullValueHandling = NullValueHandling.Ignore)]
        public Skill ScienceSkill { get; set; }

        [JsonProperty("diplomacy_skill", NullValueHandling = NullValueHandling.Ignore)]
        public Skill DiplomacySkill { get; set; }

        [JsonProperty("command_skill", NullValueHandling = NullValueHandling.Ignore)]
        public Skill CommandSkill { get; set; }

        [JsonProperty("security_skill", NullValueHandling = NullValueHandling.Ignore)]
        public Skill SecuritySkill { get; set; }

        [JsonProperty("engineering_skill", NullValueHandling = NullValueHandling.Ignore)]
        public Skill EngineeringSkill { get; set; }
    }

    public partial class Ation
    {
        [JsonProperty("system")]
        public string System { get; set; }

        [JsonProperty("place")]
        public string Place { get; set; }

        [JsonProperty("setup")]
        public string Setup { get; set; }

        [JsonProperty("x")]
        public long X { get; set; }

        [JsonProperty("y")]
        public long Y { get; set; }
    }

    public partial class DisputeHistory
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("episode")]
        public long Episode { get; set; }

        [JsonProperty("marker")]
        public List<long> Marker { get; set; }

        [JsonProperty("completed")]
        public bool Completed { get; set; }

        [JsonProperty("mission_ids")]
        public List<long> MissionIds { get; set; }

        [JsonProperty("stars_earned")]
        public long StarsEarned { get; set; }

        [JsonProperty("total_stars")]
        public long TotalStars { get; set; }

        [JsonProperty("exclude_from_timeline")]
        public bool ExcludeFromTimeline { get; set; }

        [JsonProperty("faction_id")]
        public long FactionId { get; set; }
    }

    public partial class Event
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("rules")]
        public string Rules { get; set; }

        [JsonProperty("bonus_text")]
        public string BonusText { get; set; }

        [JsonProperty("rewards_teaser")]
        public string RewardsTeaser { get; set; }

        [JsonProperty("shop_layout")]
        public string ShopLayout { get; set; }

        [JsonProperty("featured_crew")]
        public List<FeaturedCrew> FeaturedCrew { get; set; }

        [JsonProperty("threshold_rewards")]
        public List<ThresholdReward> ThresholdRewards { get; set; }

        [JsonProperty("ranked_brackets")]
        public List<RankedBracket> RankedBrackets { get; set; }

        [JsonProperty("squadron_ranked_brackets")]
        public List<SquadronRankedBracket> SquadronRankedBrackets { get; set; }

        [JsonProperty("content")]
        public Content Content { get; set; }

        [JsonProperty("instance_id")]
        public long InstanceId { get; set; }

        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("seconds_to_start")]
        public double SecondsToStart { get; set; }

        [JsonProperty("content_types")]
        public List<string> ContentTypes { get; set; }

        [JsonProperty("seconds_to_end")]
        public double SecondsToEnd { get; set; }

        [JsonProperty("phases")]
        public List<Phase> Phases { get; set; }
    }

    public partial class Content
    {
        [JsonProperty("content_type")]
        public string ContentType { get; set; }

        [JsonProperty("crew_bonuses")]
        public Dictionary<string, long> CrewBonuses { get; set; }

        [JsonProperty("gather_pools")]
        public List<object> GatherPools { get; set; }

        [JsonProperty("craft_bonus")]
        public long CraftBonus { get; set; }

        [JsonProperty("refresh_cost")]
        public Cost RefreshCost { get; set; }

        [JsonProperty("supports_boosts")]
        public bool SupportsBoosts { get; set; }
    }

    public partial class Cost
    {
        [JsonProperty("currency")]
        public long Currency { get; set; }

        [JsonProperty("amount")]
        public long Amount { get; set; }
    }

    public partial class FeaturedCrew
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("full_name")]
        public string FullName { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("icon")]
        public PortraitClass Icon { get; set; }

        [JsonProperty("portrait")]
        public PortraitClass Portrait { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }

        [JsonProperty("full_body")]
        public PortraitClass FullBody { get; set; }

        [JsonProperty("skills")]
        public BaseSkills Skills { get; set; }

        [JsonProperty("traits")]
        public List<string> Traits { get; set; }

        [JsonProperty("action")]
        public FeaturedCrewAction Action { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }
    }

    public partial class Phase
    {
        [JsonProperty("splash_image")]
        public PortraitClass SplashImage { get; set; }

        [JsonProperty("goals")]
        public List<Goal> Goals { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("seconds_to_end")]
        public double SecondsToEnd { get; set; }
    }

    public partial class Goal
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("faction_id")]
        public long FactionId { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("rewards")]
        public List<GoalReward> Rewards { get; set; }

        [JsonProperty("winner_rewards")]
        public object WinnerRewards { get; set; }

        [JsonProperty("victory_points")]
        public long VictoryPoints { get; set; }
    }

    public partial class GoalReward
    {
        [JsonProperty("points")]
        public long Points { get; set; }

        [JsonProperty("rewards")]
        public List<RewardReward> Rewards { get; set; }
    }

    public partial class RewardReward
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("full_name")]
        public string FullName { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("icon")]
        public PortraitClass Icon { get; set; }

        [JsonProperty("portrait", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass Portrait { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }

        [JsonProperty("full_body", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass FullBody { get; set; }

        [JsonProperty("skills", NullValueHandling = NullValueHandling.Ignore)]
        public RewardSkills Skills { get; set; }

        [JsonProperty("traits", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Traits { get; set; }

        [JsonProperty("action", NullValueHandling = NullValueHandling.Ignore)]
        public ActionElement Action { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }
    }

    public partial class RankedBracket
    {
        [JsonProperty("first")]
        public long First { get; set; }

        [JsonProperty("last")]
        public long Last { get; set; }

        [JsonProperty("rewards")]
        public List<RankedBracketReward> Rewards { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }
    }

    public partial class RankedBracketReward
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public PurpleSymbol Symbol { get; set; }

        [JsonProperty("name")]
        public FluffyName Name { get; set; }

        [JsonProperty("full_name")]
        public FullName FullName { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("icon")]
        public VideoAdChronitonBoostRewardIcon Icon { get; set; }

        [JsonProperty("portrait", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass Portrait { get; set; }

        [JsonProperty("rarity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Rarity { get; set; }

        [JsonProperty("full_body", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass FullBody { get; set; }

        [JsonProperty("skills", NullValueHandling = NullValueHandling.Ignore)]
        public RewardSkills Skills { get; set; }

        [JsonProperty("traits", NullValueHandling = NullValueHandling.Ignore)]
        public List<RewardTrait> Traits { get; set; }

        [JsonProperty("action", NullValueHandling = NullValueHandling.Ignore)]
        public ActionElement Action { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("item_type", NullValueHandling = NullValueHandling.Ignore)]
        public long? ItemType { get; set; }
    }

    public partial class SquadronRankedBracket
    {
        [JsonProperty("first")]
        public long First { get; set; }

        [JsonProperty("last")]
        public long Last { get; set; }

        [JsonProperty("rewards")]
        public List<ReplicatorRationType> Rewards { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }
    }

    public partial class ThresholdReward
    {
        [JsonProperty("points")]
        public long Points { get; set; }

        [JsonProperty("rewards")]
        public List<ThresholdRewardReward> Rewards { get; set; }
    }

    public partial class ThresholdRewardReward
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("full_name")]
        public string FullName { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("icon")]
        public VideoAdChronitonBoostRewardIcon Icon { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }

        [JsonProperty("portrait", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass Portrait { get; set; }

        [JsonProperty("full_body", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass FullBody { get; set; }

        [JsonProperty("skills", NullValueHandling = NullValueHandling.Ignore)]
        public BaseSkills Skills { get; set; }

        [JsonProperty("traits", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Traits { get; set; }

        [JsonProperty("action", NullValueHandling = NullValueHandling.Ignore)]
        public FeaturedCrewAction Action { get; set; }

        [JsonProperty("item_type", NullValueHandling = NullValueHandling.Ignore)]
        public long? ItemType { get; set; }

        [JsonProperty("bonuses", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, long> Bonuses { get; set; }
    }

    public partial class Faction
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("reputation")]
        public long Reputation { get; set; }

        [JsonProperty("discovered")]
        public long Discovered { get; set; }

        [JsonProperty("completed_shuttle_adventures")]
        public long CompletedShuttleAdventures { get; set; }

        [JsonProperty("icon")]
        public PortraitClass Icon { get; set; }

        [JsonProperty("representative_icon")]
        public PortraitClass RepresentativeIcon { get; set; }

        [JsonProperty("representative_full_body")]
        public PortraitClass RepresentativeFullBody { get; set; }

        [JsonProperty("reputation_icon")]
        public PortraitClass ReputationIcon { get; set; }

        [JsonProperty("reputation_item_icon")]
        public PortraitClass ReputationItemIcon { get; set; }

        [JsonProperty("home_system")]
        public string HomeSystem { get; set; }

        [JsonProperty("shop_layout")]
        public string ShopLayout { get; set; }

        [JsonProperty("shuttle_token_id")]
        public long ShuttleTokenId { get; set; }

        [JsonProperty("shuttle_token_preview_item")]
        public ReplicatorRationType ShuttleTokenPreviewItem { get; set; }

        [JsonProperty("event_winner_rewards")]
        public List<EventWinnerReward> EventWinnerRewards { get; set; }
    }

    public partial class EventWinnerReward
    {
        [JsonProperty("bonuses")]
        public Chats Bonuses { get; set; }

        [JsonProperty("time_modifier")]
        public long TimeModifier { get; set; }

        [JsonProperty("cr_modifier")]
        public long CrModifier { get; set; }

        [JsonProperty("reward_modifier")]
        public long RewardModifier { get; set; }

        [JsonProperty("rewards")]
        public List<MilestoneReward> Rewards { get; set; }

        [JsonProperty("expires_in")]
        public double ExpiresIn { get; set; }
    }

    public partial class Chats
    {
    }

    public partial class FleetActivity
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("icon")]
        public VideoAdChronitonBoostRewardIcon Icon { get; set; }

        [JsonProperty("area")]
        public string Area { get; set; }

        [JsonProperty("sort_priority")]
        public long SortPriority { get; set; }

        [JsonProperty("category")]
        public string Category { get; set; }

        [JsonProperty("total_points")]
        public long TotalPoints { get; set; }

        [JsonProperty("current_points")]
        public long CurrentPoints { get; set; }

        [JsonProperty("milestones")]
        public List<MilestoneElement> Milestones { get; set; }

        [JsonProperty("claims_available_count")]
        public long ClaimsAvailableCount { get; set; }
    }

    public partial class MilestoneElement
    {
        [JsonProperty("goal")]
        public long Goal { get; set; }

        [JsonProperty("rewards")]
        public List<MilestoneReward> Rewards { get; set; }

        [JsonProperty("claimed")]
        public bool Claimed { get; set; }

        [JsonProperty("claimable")]
        public bool Claimable { get; set; }
    }

    public partial class PurpleItem
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("archetype_id")]
        public long ArchetypeId { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("icon")]
        public PortraitClass Icon { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }

        [JsonProperty("expires_in")]
        public object ExpiresIn { get; set; }

        [JsonProperty("short_name", NullValueHandling = NullValueHandling.Ignore)]
        public string ShortName { get; set; }

        [JsonProperty("bonuses", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, long> Bonuses { get; set; }

        [JsonProperty("time_modifier", NullValueHandling = NullValueHandling.Ignore)]
        public long? TimeModifier { get; set; }

        [JsonProperty("cr_modifier", NullValueHandling = NullValueHandling.Ignore)]
        public long? CrModifier { get; set; }

        [JsonProperty("reward_modifier", NullValueHandling = NullValueHandling.Ignore)]
        public long? RewardModifier { get; set; }

        [JsonProperty("crafting_bonuses", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, double> CraftingBonuses { get; set; }
    }

    public partial class Navmap
    {
        [JsonProperty("places")]
        public List<Place> Places { get; set; }

        [JsonProperty("systems")]
        public List<SystemElement> Systems { get; set; }
    }

    public partial class Place
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("system")]
        public string System { get; set; }

        [JsonProperty("client_asset")]
        public ClientAsset ClientAsset { get; set; }

        [JsonProperty("display_name", NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("visited", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Visited { get; set; }
    }

    public partial class ClientAsset
    {
        [JsonProperty("system")]
        public string System { get; set; }

        [JsonProperty("place")]
        public string Place { get; set; }
    }

    public partial class SystemElement
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("x")]
        public long X { get; set; }

        [JsonProperty("y")]
        public long Y { get; set; }

        [JsonProperty("default_place")]
        public string DefaultPlace { get; set; }

        [JsonProperty("display_name", NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [JsonProperty("star", NullValueHandling = NullValueHandling.Ignore)]
        public long? Star { get; set; }

        [JsonProperty("decorator", NullValueHandling = NullValueHandling.Ignore)]
        public long? Decorator { get; set; }

        [JsonProperty("faction", NullValueHandling = NullValueHandling.Ignore)]
        public string Faction { get; set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public long? Scale { get; set; }

        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }
    }

    public partial class PvpDivision
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("tier")]
        public long Tier { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("min_ship_rarity")]
        public long MinShipRarity { get; set; }

        [JsonProperty("max_ship_rarity")]
        public long MaxShipRarity { get; set; }

        [JsonProperty("max_crew_rarity")]
        public long MaxCrewRarity { get; set; }

        [JsonProperty("setup")]
        public Setup Setup { get; set; }
    }

    public partial class Setup
    {
        [JsonProperty("ship_id")]
        public long ShipId { get; set; }

        [JsonProperty("slots")]
        public List<long> Slots { get; set; }
    }

    public partial class PvpTimer
    {
        [JsonProperty("supports_rewarding")]
        public bool SupportsRewarding { get; set; }

        [JsonProperty("pvp_allowed")]
        public bool PvpAllowed { get; set; }

        [JsonProperty("changes_in")]
        public double ChangesIn { get; set; }
    }

    public partial class Season
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("exclusive_crew")]
        public List<ExclusiveCrew> ExclusiveCrew { get; set; }

        [JsonProperty("tiers")]
        public List<Tier> Tiers { get; set; }

        [JsonProperty("points_per_tier")]
        public long PointsPerTier { get; set; }

        [JsonProperty("tier_dilithium_cost")]
        public long TierDilithiumCost { get; set; }

        [JsonProperty("start_at")]
        public double StartAt { get; set; }

        [JsonProperty("end_at")]
        public double EndAt { get; set; }

        [JsonProperty("premium_tier_offer_store_symbol")]
        public string PremiumTierOfferStoreSymbol { get; set; }

        [JsonProperty("premium_tier_entitlement_symbol")]
        public string PremiumTierEntitlementSymbol { get; set; }

        [JsonProperty("premium_tier_entitlement_specialization")]
        public string PremiumTierEntitlementSpecialization { get; set; }

        [JsonProperty("opened")]
        public bool Opened { get; set; }

        [JsonProperty("points")]
        public long Points { get; set; }

        [JsonProperty("redeemed_points")]
        public long RedeemedPoints { get; set; }

        [JsonProperty("redeemed_premium")]
        public long RedeemedPremium { get; set; }

        [JsonProperty("acknowledged")]
        public bool Acknowledged { get; set; }

        [JsonProperty("concluded")]
        public bool Concluded { get; set; }
    }

    public partial class ExclusiveCrew
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("max_rarity")]
        public long MaxRarity { get; set; }

        [JsonProperty("full_body")]
        public VideoAdChronitonBoostRewardIcon FullBody { get; set; }

        [JsonProperty("archetype_id")]
        public long ArchetypeId { get; set; }
    }

    public partial class Tier
    {
        [JsonProperty("points")]
        public long Points { get; set; }

        [JsonProperty("rewards")]
        public List<PotentialRewardElement> Rewards { get; set; }

        [JsonProperty("premium_rewards")]
        public List<PremiumReward> PremiumRewards { get; set; }
    }

    public partial class PremiumReward
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public VideoAdChronitonBoostRewardSymbol Symbol { get; set; }

        [JsonProperty("name")]
        public PurpleName Name { get; set; }

        [JsonProperty("full_name")]
        public FullNameEnum FullName { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("icon")]
        public VideoAdChronitonBoostRewardIcon Icon { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }

        [JsonProperty("item_type", NullValueHandling = NullValueHandling.Ignore)]
        public long? ItemType { get; set; }

        [JsonProperty("portrait", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass Portrait { get; set; }

        [JsonProperty("full_body", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass FullBody { get; set; }

        [JsonProperty("skills", NullValueHandling = NullValueHandling.Ignore)]
        public PremiumRewardSkills Skills { get; set; }

        [JsonProperty("traits", NullValueHandling = NullValueHandling.Ignore)]
        public List<PremiumRewardTrait> Traits { get; set; }

        [JsonProperty("action", NullValueHandling = NullValueHandling.Ignore)]
        public ActionElement Action { get; set; }
    }

    public partial class PremiumRewardSkills
    {
        [JsonProperty("medicine_skill")]
        public Skill MedicineSkill { get; set; }

        [JsonProperty("science_skill")]
        public Skill ScienceSkill { get; set; }

        [JsonProperty("security_skill")]
        public Skill SecuritySkill { get; set; }
    }

    public partial class PotentialRewardElement
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("full_name")]
        public string FullName { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("icon")]
        public VideoAdChronitonBoostRewardIcon Icon { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }

        [JsonProperty("item_type", NullValueHandling = NullValueHandling.Ignore)]
        public long? ItemType { get; set; }

        [JsonProperty("portrait", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass Portrait { get; set; }

        [JsonProperty("full_body", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass FullBody { get; set; }

        [JsonProperty("skills", NullValueHandling = NullValueHandling.Ignore)]
        public RewardSkills Skills { get; set; }

        [JsonProperty("traits", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Traits { get; set; }

        [JsonProperty("action", NullValueHandling = NullValueHandling.Ignore)]
        public FeaturedCrewAction Action { get; set; }
    }

    public partial class ShipElement
    {
        [JsonProperty("archetype_id")]
        public long ArchetypeId { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }

        [JsonProperty("icon")]
        public PortraitClass Icon { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("model")]
        public string Model { get; set; }

        [JsonProperty("max_level")]
        public long MaxLevel { get; set; }

        [JsonProperty("actions")]
        public List<ActionElement> Actions { get; set; }

        [JsonProperty("shields")]
        public long Shields { get; set; }

        [JsonProperty("hull")]
        public long Hull { get; set; }

        [JsonProperty("attack")]
        public long Attack { get; set; }

        [JsonProperty("evasion")]
        public long Evasion { get; set; }

        [JsonProperty("accuracy")]
        public long Accuracy { get; set; }

        [JsonProperty("crit_chance")]
        public long CritChance { get; set; }

        [JsonProperty("crit_bonus")]
        public long CritBonus { get; set; }

        [JsonProperty("attacks_per_second")]
        public double AttacksPerSecond { get; set; }

        [JsonProperty("shield_regen")]
        public long ShieldRegen { get; set; }

        [JsonProperty("traits")]
        public List<string> Traits { get; set; }

        [JsonProperty("traits_hidden")]
        public List<object> TraitsHidden { get; set; }

        [JsonProperty("antimatter")]
        public long Antimatter { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("schematic_gain_cost_next_level")]
        public long SchematicGainCostNextLevel { get; set; }

        [JsonProperty("schematic_id")]
        public long SchematicId { get; set; }

        [JsonProperty("schematic_icon")]
        public PortraitClass SchematicIcon { get; set; }

        [JsonProperty("battle_stations")]
        public List<BattleStation> BattleStations { get; set; }
    }

    public partial class BattleStation
    {
        [JsonProperty("skill")]
        public ChallengeSkillEnum Skill { get; set; }
    }

    public partial class Tutorial
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("state")]
        public TutorialState State { get; set; }
    }

    public partial class Voyage
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("icon")]
        public string Icon { get; set; }

        [JsonProperty("skills")]
        public VoyageSkills Skills { get; set; }

        [JsonProperty("ship_trait")]
        public string ShipTrait { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("ship_name")]
        public object ShipName { get; set; }

        [JsonProperty("max_hp")]
        public long MaxHp { get; set; }

        [JsonProperty("hp")]
        public long Hp { get; set; }

        [JsonProperty("log_index")]
        public long LogIndex { get; set; }

        [JsonProperty("pending_rewards")]
        public PendingRewards PendingRewards { get; set; }

        [JsonProperty("granted_rewards")]
        public object GrantedRewards { get; set; }

        [JsonProperty("seed")]
        public long Seed { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("recalled_at")]
        public object RecalledAt { get; set; }

        [JsonProperty("completed_at")]
        public object CompletedAt { get; set; }

        [JsonProperty("voyage_duration")]
        public long VoyageDuration { get; set; }

        [JsonProperty("skill_aggregates")]
        public BaseSkills SkillAggregates { get; set; }

        [JsonProperty("seconds_between_dilemmas")]
        public long SecondsBetweenDilemmas { get; set; }

        [JsonProperty("seconds_since_last_dilemma")]
        public long SecondsSinceLastDilemma { get; set; }

        [JsonProperty("first_leave")]
        public bool FirstLeave { get; set; }

        [JsonProperty("time_to_next_event")]
        public long TimeToNextEvent { get; set; }

        [JsonProperty("ship_id")]
        public long ShipId { get; set; }

        [JsonProperty("crew_slots")]
        public List<CrewSlot> CrewSlots { get; set; }
    }

    public partial class CrewSlot
    {
        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("skill")]
        public ChallengeSkillEnum Skill { get; set; }

        [JsonProperty("trait")]
        public string Trait { get; set; }

        [JsonProperty("crew", NullValueHandling = NullValueHandling.Ignore)]
        public Crew Crew { get; set; }
    }

    public partial class PendingRewards
    {
        [JsonProperty("loot")]
        public List<Loot> Loot { get; set; }
    }

    public partial class Loot
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("full_name")]
        public string FullName { get; set; }

        [JsonProperty("flavor")]
        public string Flavor { get; set; }

        [JsonProperty("icon")]
        public VideoAdChronitonBoostRewardIcon Icon { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("rarity")]
        public long Rarity { get; set; }

        [JsonProperty("item_type", NullValueHandling = NullValueHandling.Ignore)]
        public long? ItemType { get; set; }

        [JsonProperty("portrait", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass Portrait { get; set; }

        [JsonProperty("full_body", NullValueHandling = NullValueHandling.Ignore)]
        public PortraitClass FullBody { get; set; }

        [JsonProperty("skills", NullValueHandling = NullValueHandling.Ignore)]
        public BaseSkills Skills { get; set; }

        [JsonProperty("traits", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Traits { get; set; }

        [JsonProperty("action", NullValueHandling = NullValueHandling.Ignore)]
        public FeaturedCrewAction Action { get; set; }
    }

    public partial class VoyageSkills
    {
        [JsonProperty("primary_skill")]
        public ChallengeSkillEnum PrimarySkill { get; set; }

        [JsonProperty("secondary_skill")]
        public ChallengeSkillEnum SecondarySkill { get; set; }
    }

    public partial class VoyageDescription
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("icon")]
        public string Icon { get; set; }

        [JsonProperty("skills")]
        public VoyageSkills Skills { get; set; }

        [JsonProperty("ship_trait")]
        public string ShipTrait { get; set; }

        [JsonProperty("crew_slots")]
        public List<CrewSlot> CrewSlots { get; set; }

        [JsonProperty("potential_rewards")]
        public List<PotentialRewardElement> PotentialRewards { get; set; }
    }

    public partial class VoyageSummaries
    {
        [JsonProperty("summaries")]
        public List<Summary> Summaries { get; set; }

        [JsonProperty("flavor_amount")]
        public long FlavorAmount { get; set; }
    }

    public partial class Summary
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("min")]
        public long Min { get; set; }

        [JsonProperty("max")]
        public long Max { get; set; }
    }

    public partial class CommunityLink
    {
        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("image")]
        public Image Image { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("date")]
        public string Date { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("file")]
        public Uri File { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("version")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Version { get; set; }
    }

    public partial class CurrencyExchange
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("amount")]
        public long Amount { get; set; }

        [JsonProperty("output")]
        public long Output { get; set; }

        [JsonProperty("input")]
        public long Input { get; set; }

        [JsonProperty("schedule")]
        public List<long> Schedule { get; set; }

        [JsonProperty("exchanges_today")]
        public long ExchangesToday { get; set; }

        [JsonProperty("bonus", NullValueHandling = NullValueHandling.Ignore)]
        public long? Bonus { get; set; }

        [JsonProperty("limit", NullValueHandling = NullValueHandling.Ignore)]
        public long? Limit { get; set; }

        [JsonProperty("dynamic_amount", NullValueHandling = NullValueHandling.Ignore)]
        public DynamicAmount DynamicAmount { get; set; }

        [JsonProperty("disallow_sale_above_cap", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DisallowSaleAboveCap { get; set; }
    }

    public partial class DynamicAmount
    {
        [JsonProperty("enabled")]
        public bool Enabled { get; set; }

        [JsonProperty("max")]
        public long Max { get; set; }
    }

    public partial class Entitlements
    {
        [JsonProperty("granted")]
        public List<Granted> Granted { get; set; }

        [JsonProperty("claimed")]
        public List<Claimed> Claimed { get; set; }
    }

    public partial class Claimed
    {
        [JsonProperty("uuid")]
        public string Uuid { get; set; }

        [JsonProperty("gamerTag")]
        public long GamerTag { get; set; }

        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("state")]
        public FromEnum State { get; set; }

        [JsonProperty("updated")]
        public long Updated { get; set; }

        [JsonProperty("history")]
        public List<ClaimedHistory> History { get; set; }

        [JsonProperty("specialized", NullValueHandling = NullValueHandling.Ignore)]
        public string Specialized { get; set; }

        [JsonProperty("cwin", NullValueHandling = NullValueHandling.Ignore)]
        public Cwin Cwin { get; set; }

        [JsonProperty("cwinSecsTillOpen", NullValueHandling = NullValueHandling.Ignore)]
        public long? CwinSecsTillOpen { get; set; }

        [JsonProperty("cwinSecsTillClose", NullValueHandling = NullValueHandling.Ignore)]
        public long? CwinSecsTillClose { get; set; }

        [JsonProperty("ttl", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ttl { get; set; }
    }

    public partial class Cwin
    {
        [JsonProperty("open")]
        public long Open { get; set; }

        [JsonProperty("close")]
        public long Close { get; set; }
    }

    public partial class ClaimedHistory
    {
        [JsonProperty("what")]
        public FromEnum What { get; set; }

        [JsonProperty("when")]
        public DateTimeOffset When { get; set; }

        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public FromEnum? To { get; set; }

        [JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
        public FromEnum? From { get; set; }

        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Quantity { get; set; }

        [JsonProperty("who", NullValueHandling = NullValueHandling.Ignore)]
        public string Who { get; set; }

        [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
        public string Image { get; set; }

        [JsonProperty("ecount", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Ecount { get; set; }

        [JsonProperty("reward_image", NullValueHandling = NullValueHandling.Ignore)]
        public string RewardImage { get; set; }

        [JsonProperty("obtain", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Obtain { get; set; }
    }

    public partial class Granted
    {
        [JsonProperty("uuid")]
        public string Uuid { get; set; }

        [JsonProperty("gamerTag")]
        public long GamerTag { get; set; }

        [JsonProperty("symbol")]
        public GrantedSymbol Symbol { get; set; }

        [JsonProperty("state")]
        public FromEnum State { get; set; }

        [JsonProperty("updated")]
        public long Updated { get; set; }

        [JsonProperty("history")]
        public List<GrantedHistory> History { get; set; }

        [JsonProperty("specialized", NullValueHandling = NullValueHandling.Ignore)]
        public Specialized? Specialized { get; set; }
    }

    public partial class GrantedHistory
    {
        [JsonProperty("what")]
        public FromEnum What { get; set; }

        [JsonProperty("when")]
        public DateTimeOffset When { get; set; }

        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public FromEnum? To { get; set; }

        [JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
        public FromEnum? From { get; set; }

        [JsonProperty("reason", NullValueHandling = NullValueHandling.Ignore)]
        public Reason? Reason { get; set; }
    }

    public partial class Environment
    {
        [JsonProperty("tutorials")]
        public List<string> Tutorials { get; set; }

        [JsonProperty("level_requirement_123s")]
        public long LevelRequirement123S { get; set; }

        [JsonProperty("restrictions")]
        public object Restrictions { get; set; }

        [JsonProperty("background_idle_period")]
        public long BackgroundIdlePeriod { get; set; }

        [JsonProperty("fleet_request_purge_threshold")]
        public long FleetRequestPurgeThreshold { get; set; }

        [JsonProperty("fleet_request_purge_expiration_days")]
        public long FleetRequestPurgeExpirationDays { get; set; }

        [JsonProperty("event_refresh_min_seconds")]
        public long EventRefreshMinSeconds { get; set; }

        [JsonProperty("event_refresh_max_seconds")]
        public long EventRefreshMaxSeconds { get; set; }

        [JsonProperty("allow_webgl_looping_audio")]
        public bool AllowWebglLoopingAudio { get; set; }

        [JsonProperty("display_server_environment")]
        public bool DisplayServerEnvironment { get; set; }

        [JsonProperty("video_ad_campaign_limit")]
        public VideoAdCampaignLimit VideoAdCampaignLimit { get; set; }

        [JsonProperty("fleet_activities_restriction_enabled")]
        public bool FleetActivitiesRestrictionEnabled { get; set; }

        [JsonProperty("shuttle_rental_dil_cost")]
        public long ShuttleRentalDilCost { get; set; }

        [JsonProperty("location_updates_enabled")]
        public bool LocationUpdatesEnabled { get; set; }

        [JsonProperty("location_chat_enabled")]
        public bool LocationChatEnabled { get; set; }

        [JsonProperty("enable_server_toasts")]
        public bool EnableServerToasts { get; set; }

        [JsonProperty("minimum_toast_delay_in_seconds")]
        public long MinimumToastDelayInSeconds { get; set; }

        [JsonProperty("starbase_refresh")]
        public long StarbaseRefresh { get; set; }

        [JsonProperty("detect_conflict_mastery_errors")]
        public bool DetectConflictMasteryErrors { get; set; }

        [JsonProperty("dilithium_purchase_popup_enabled")]
        public bool DilithiumPurchasePopupEnabled { get; set; }

        [JsonProperty("dilithium_purchase_popup_threshold")]
        public long DilithiumPurchasePopupThreshold { get; set; }

        [JsonProperty("help_center_button_enabled")]
        public bool HelpCenterButtonEnabled { get; set; }

        [JsonProperty("anti_macro")]
        public AntiMacro AntiMacro { get; set; }

        [JsonProperty("use_updated_speed_up_cost")]
        public bool UseUpdatedSpeedUpCost { get; set; }

        [JsonProperty("rental_shuttles_enabled")]
        public bool RentalShuttlesEnabled { get; set; }

        [JsonProperty("ship_battle_assist_character_level")]
        public long ShipBattleAssistCharacterLevel { get; set; }

        [JsonProperty("ship_battle_speedup_multipliers")]
        public List<long> ShipBattleSpeedupMultipliers { get; set; }

        [JsonProperty("hud_popup_queue")]
        public HudPopupQueue HudPopupQueue { get; set; }

        [JsonProperty("limited_time_offers_v2")]
        public LimitedTimeOffersV2 LimitedTimeOffersV2 { get; set; }

        [JsonProperty("load_with_equipment_rank_caching")]
        public bool LoadWithEquipmentRankCaching { get; set; }

        [JsonProperty("currency_gained_analytic_enabled")]
        public bool CurrencyGainedAnalyticEnabled { get; set; }

        [JsonProperty("fix_chroniton_ad_boost")]
        public bool FixChronitonAdBoost { get; set; }

        [JsonProperty("season_123_tier_threshold")]
        public long Season123_TierThreshold { get; set; }

        [JsonProperty("season_123_no_premium_tier_threshold")]
        public long Season123_NoPremiumTierThreshold { get; set; }

        [JsonProperty("webgl_debug_cohort")]
        public bool WebglDebugCohort { get; set; }

        [JsonProperty("ratings_whitelist")]
        public List<string> RatingsWhitelist { get; set; }

        [JsonProperty("ironsource_ios_app_id")]
        public string IronsourceIosAppId { get; set; }

        [JsonProperty("ironsource_android_app_id")]
        public string IronsourceAndroidAppId { get; set; }

        [JsonProperty("ironsource_underage_ios_app_id")]
        public string IronsourceUnderageIosAppId { get; set; }

        [JsonProperty("ironsource_underage_android_app_id")]
        public string IronsourceUnderageAndroidAppId { get; set; }

        [JsonProperty("offerwall_enabled")]
        public bool OfferwallEnabled { get; set; }

        [JsonProperty("create_player_forte_wallet_on_login")]
        public bool CreatePlayerForteWalletOnLogin { get; set; }

        [JsonProperty("replicate_forte_wallet_on_login")]
        public bool ReplicateForteWalletOnLogin { get; set; }

        [JsonProperty("replicate_forte_wallet_on_update")]
        public bool ReplicateForteWalletOnUpdate { get; set; }

        [JsonProperty("crew_crafting")]
        public CrewCraftingClass CrewCrafting { get; set; }

        [JsonProperty("dusting_enabled")]
        public bool DustingEnabled { get; set; }

        [JsonProperty("ism_for_polestar_dusting")]
        public long IsmForPolestarDusting { get; set; }

        [JsonProperty("ism_for_constellation_dusting")]
        public long IsmForConstellationDusting { get; set; }

        [JsonProperty("collect_entitlement_claim_result_data")]
        public bool CollectEntitlementClaimResultData { get; set; }

        [JsonProperty("publish_entitlement_claim_results")]
        public bool PublishEntitlementClaimResults { get; set; }

        [JsonProperty("handle_entitlement_claim_result_publications")]
        public bool HandleEntitlementClaimResultPublications { get; set; }

        [JsonProperty("privacy_policy_version")]
        public long PrivacyPolicyVersion { get; set; }

        [JsonProperty("terms_service_version")]
        public long TermsServiceVersion { get; set; }

        [JsonProperty("event_hub_historical_event_limit")]
        public long EventHubHistoricalEventLimit { get; set; }

        [JsonProperty("nerf_refresh_all")]
        public bool NerfRefreshAll { get; set; }

        [JsonProperty("track_battles_at_start")]
        public bool TrackBattlesAtStart { get; set; }

        [JsonProperty("track_battles_at_end")]
        public bool TrackBattlesAtEnd { get; set; }

        [JsonProperty("retargeting")]
        public Retargeting Retargeting { get; set; }

        [JsonProperty("ccpa_opt_out_url")]
        public Uri CcpaOptOutUrl { get; set; }

        [JsonProperty("age_gate")]
        public bool AgeGate { get; set; }

        [JsonProperty("consent_age")]
        public long ConsentAge { get; set; }

        [JsonProperty("log_errors_to_analytics")]
        public bool LogErrorsToAnalytics { get; set; }

        [JsonProperty("offer_location_on_hud")]
        public string OfferLocationOnHud { get; set; }

        [JsonProperty("marketplace_enabled")]
        public bool MarketplaceEnabled { get; set; }

        [JsonProperty("maximum_quantity_per_order")]
        public long MaximumQuantityPerOrder { get; set; }

        [JsonProperty("maximum_orders_per_type_per_player")]
        public long MaximumOrdersPerTypePerPlayer { get; set; }

        [JsonProperty("order_lifetime_value")]
        public long OrderLifetimeValue { get; set; }

        [JsonProperty("order_lifetime_unit")]
        public string OrderLifetimeUnit { get; set; }

        [JsonProperty("maximum_price_per_order")]
        public long MaximumPricePerOrder { get; set; }

        [JsonProperty("use_market_transaction_notifications")]
        public bool UseMarketTransactionNotifications { get; set; }

        [JsonProperty("market_receipt_count")]
        public long MarketReceiptCount { get; set; }

        [JsonProperty("quick_order_unfilled_is_error")]
        public bool QuickOrderUnfilledIsError { get; set; }

        [JsonProperty("marketplace_txn_history_caching")]
        public MarketplaceTxnHistoryCaching MarketplaceTxnHistoryCaching { get; set; }

        [JsonProperty("firebase_analytics_enabled")]
        public bool FirebaseAnalyticsEnabled { get; set; }

        [JsonProperty("daily_missions_repair_enabled")]
        public bool DailyMissionsRepairEnabled { get; set; }

        [JsonProperty("use_v2_activities_panel")]
        public bool UseV2ActivitiesPanel { get; set; }

        [JsonProperty("grant_current_season_entitlement")]
        public bool GrantCurrentSeasonEntitlement { get; set; }

        [JsonProperty("should_reject_disabled_activities")]
        public bool ShouldRejectDisabledActivities { get; set; }

        [JsonProperty("should_repair_progress")]
        public bool ShouldRepairProgress { get; set; }

        [JsonProperty("ism_daily_rewards_reward_start_date")]
        public DateTimeOffset IsmDailyRewardsRewardStartDate { get; set; }

        [JsonProperty("fleet_activity_complete_all_daily_activities_start_date")]
        public DateTimeOffset FleetActivityCompleteAllDailyActivitiesStartDate { get; set; }

        [JsonProperty("scanning_v2")]
        public ScanningV2Class ScanningV2 { get; set; }

        [JsonProperty("allow_forte_inventory_access")]
        public bool AllowForteInventoryAccess { get; set; }

        [JsonProperty("show_ism_subcoin")]
        public bool ShowIsmSubcoin { get; set; }
    }

    public partial class AntiMacro
    {
        [JsonProperty("min_minutes_to_popup")]
        public long MinMinutesToPopup { get; set; }

        [JsonProperty("variable_minutes_to_popup")]
        public long VariableMinutesToPopup { get; set; }
    }

    public partial class HudPopupQueue
    {
        [JsonProperty("max_sequential_popups")]
        public long MaxSequentialPopups { get; set; }

        [JsonProperty("popup_cooldown_seconds")]
        public long PopupCooldownSeconds { get; set; }
    }

    public partial class LimitedTimeOffersV2
    {
        [JsonProperty("enabled")]
        public bool Enabled { get; set; }

        [JsonProperty("max_sequential_popups")]
        public long MaxSequentialPopups { get; set; }

        [JsonProperty("popup_cooldown_seconds")]
        public long PopupCooldownSeconds { get; set; }

        [JsonProperty("force_popup_at_login")]
        public bool ForcePopupAtLogin { get; set; }
    }

    public partial class MarketplaceTxnHistoryCaching
    {
        [JsonProperty("enabled")]
        public bool Enabled { get; set; }

        [JsonProperty("duration_mins")]
        public long DurationMins { get; set; }
    }

    public partial class Retargeting
    {
        [JsonProperty("enabled")]
        public bool Enabled { get; set; }

        [JsonProperty("lapsed_days")]
        public long LapsedDays { get; set; }

        [JsonProperty("spec_name")]
        public string SpecName { get; set; }
    }

    public partial class ScanningV2Class
    {
        [JsonProperty("enabled")]
        public bool Enabled { get; set; }
    }

    public partial class VideoAdCampaignLimit
    {
        [JsonProperty("master_limit")]
        public MasterLimit MasterLimit { get; set; }

        [JsonProperty("stt_rewarded_scan")]
        public MasterLimit SttRewardedScan { get; set; }

        [JsonProperty("stt_rewarded_warp")]
        public MasterLimit SttRewardedWarp { get; set; }

        [JsonProperty("stt_cadet_warp")]
        public MasterLimit SttCadetWarp { get; set; }

        [JsonProperty("stt_rewarded_shuttle")]
        public MasterLimit SttRewardedShuttle { get; set; }

        [JsonProperty("stt_rewarded_credits")]
        public MasterLimit SttRewardedCredits { get; set; }

        [JsonProperty("stt_rewarded_dabo")]
        public MasterLimit SttRewardedDabo { get; set; }

        [JsonProperty("stt_rewarded_chroniton_boost")]
        public MasterLimit SttRewardedChronitonBoost { get; set; }

        [JsonProperty("stt_rewarded_double_rewards")]
        public MasterLimit SttRewardedDoubleRewards { get; set; }
    }

    public partial class MasterLimit
    {
        [JsonProperty("chance")]
        public long Chance { get; set; }

        [JsonProperty("period_minutes")]
        public long PeriodMinutes { get; set; }
    }

    public partial class Fleet
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("rlevel")]
        public long Rlevel { get; set; }

        [JsonProperty("sinsignia")]
        public string Sinsignia { get; set; }

        [JsonProperty("nicon_index")]
        public long NiconIndex { get; set; }

        [JsonProperty("nleader_player_dbid")]
        public long NleaderPlayerDbid { get; set; }

        [JsonProperty("nstarbase_level")]
        public long NstarbaseLevel { get; set; }

        [JsonProperty("nleader_login")]
        public long NleaderLogin { get; set; }

        [JsonProperty("slabel")]
        public string Slabel { get; set; }

        [JsonProperty("cursize")]
        public long Cursize { get; set; }

        [JsonProperty("maxsize")]
        public long Maxsize { get; set; }

        [JsonProperty("created")]
        public long Created { get; set; }

        [JsonProperty("enrollment")]
        public string Enrollment { get; set; }

        [JsonProperty("nmin_level")]
        public long NminLevel { get; set; }

        [JsonProperty("rank")]
        public string Rank { get; set; }

        [JsonProperty("epoch_time")]
        public long EpochTime { get; set; }
    }

    public partial class FleetInvite
    {
        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("sendable")]
        public long Sendable { get; set; }

        [JsonProperty("sent")]
        public long Sent { get; set; }

        [JsonProperty("accepted")]
        public long Accepted { get; set; }

        [JsonProperty("stores")]
        public Stores Stores { get; set; }

        [JsonProperty("received")]
        public long Received { get; set; }
    }

    public partial class Stores
    {
        [JsonProperty("SOCIAL.GUILD.INVITE")]
        public long SocialGuildInvite { get; set; }
    }

    public partial class Mailbox
    {
        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("sendable")]
        public long Sendable { get; set; }

        [JsonProperty("sent")]
        public long Sent { get; set; }

        [JsonProperty("accepted")]
        public long Accepted { get; set; }

        [JsonProperty("stores")]
        public Dictionary<string, long> Stores { get; set; }

        [JsonProperty("received")]
        public long Received { get; set; }
    }

    public partial class Motd
    {
        [JsonProperty("priority")]
        public long Priority { get; set; }

        [JsonProperty("url")]
        public object Url { get; set; }

        [JsonProperty("additional_motds")]
        public List<object> AdditionalMotds { get; set; }
    }

    public partial class Squad
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("rank")]
        public string Rank { get; set; }
    }

    public partial class ScanningRoot
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("config")]
        public ScanningRootConfig Config { get; set; }

        [JsonProperty("env")]
        public ScanningV2Class Env { get; set; }

        [JsonProperty("scanning_status")]
        public ScanningStatus ScanningStatus { get; set; }
    }

    public partial class ScanningRootConfig
    {
        [JsonProperty("ism_subcoin_cost")]
        public List<long> IsmSubcoinCost { get; set; }
    }

    public partial class ScanningStatus
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("seconds_to_reset")]
        public double SecondsToReset { get; set; }

        [JsonProperty("seconds_in_reset_period")]
        public long SecondsInResetPeriod { get; set; }

        [JsonProperty("cost_step")]
        public long CostStep { get; set; }

        [JsonProperty("critical_success_chance")]
        public double CriticalSuccessChance { get; set; }
    }

    public enum ChallengeSkillEnum { CommandSkill, DiplomacySkill, EngineeringSkill, MedicineSkill, ScienceSkill, SecuritySkill };

    public enum Operator { Increment, PercentDecrease, PercentIncrease };

    public enum Source { CrewCollection, Starbase };

    public enum FullNameEnum { Chronitons, Dilithium, DynamicReplicatorRation, FederationCredits, Honor, InterstellarMedium, LegendaryHonorableCitation, Merits, PremiumTimePortal, RequisitionShuttleTokens, RewardMultiplier, The10XPremiumShuttleBoost, The10XPremiumTimePortal, TwilightTPol, The10XStandardShuttleBoost, LeahBrahms, CaptainProtonRocketShipSchematic, NyotaUhura };

    public enum AtlasInfo { AtlasSttForteInfo, AtlasSttIcons2Info, AtlasSttIconsInfo };

    public enum VideoAdChronitonBoostRewardSymbol { Energy, Honor, HonorableCitationQuality5, IsmSubcoin, Nonpremium, Premium10XBundle, Premium1XBundle, PremiumConsumables10XBundle, PremiumEarnable, PremiumPurchasable, ReplicatorFuelLegendary, RewardMultiplier5_ShuttleConsumable, ShuttleRentalTokens, TpolTwilightCrew, StandardConsumables10Bundle, BrahmsLeahCrew, CaptainProtonShipSchematic, UhuraStivCrew };

    public enum PurpleName { Augments, Chronitons, Credits, Dilithium, HonCitation, Honor, Ism, Merits, Portal, ReplicatorFuel, RewardMultiplier, TPol, The10XPShuttle, The10XPortal, Tokens, The10XSShuttle, Brahms, CaptainProtonRocketShipShcematics, CaptainProtonRocketShipSchematics, Uhura };

    public enum FullName { AdvancedTacticalTraining, CaptainSaru, CommanderTPol, Dilithium, DynamicOfficerTraining, Honor, InterstellarMedium, Merits, RarityConstellation, SkillConstellation, The10XPremiumTimePortal, TribbleUhura, CaptainLucero, TribbleMcCoy, CaptainSulu, TribbleChekov, TraderOdo, LittleJohnRiker, TouristQuark, ProphetKira, NinersKiraNerys, RacketballOBrien, TimeLoopMudd, UnionQ };

    public enum FluffyName { Dilithium, Honor, Ism, Merits, Rarity, Saru, Skill, TPol, The10XPortal, Training, Uhura, Lucero, McCoy, Sulu, Chekov, Odo, Riker, Quark, Kira, OBrien, Mudd, Q };

    public enum PurpleSymbol { DscSaruCaptainCrew, Honor, HugeProductionTraining, IsmSubcoin, MegaProductionTraining, Premium10XBundle, PremiumEarnable, PremiumPurchasable, RarityKeystoneCrate, SkillKeystoneCrate, TpolCommanderCrew, UhuraTribbleCrew, ChekovTribbleCrew, DscLuceroCaptainCrew, MccoyTribbleCrew, SuluCaptainCrew, OdoTosCrew, RikerLittlejohnCrew, QuarkRisaCrew, KiraProphetCrew, KiraNinersCrew, OBrienRacketballCrew, DscMuddTakeoverCrew, CaptainProtonRocketShipSchematic, QUnionCrew, UnuraWrathOfKhanCrew };

    public enum RewardTrait { Astrophysicist, Exobiology, Federation, Inspiring, Kelpien, Starfleet, Telepath, Vulcan, Human, Communicator, Resourceful, Tribbled, Survivalist, Explorer, Doctor, Veteran, Tactician, Pilot, Changeling, Costumed, Merchant, Shapeshifter, Thief, Ferengi, Scoundrel, Desperate, Romantic, Gambler, Civilian, Bajoran, Spiritual, Maverick, Athlete, Duelist, Crafty, Smuggler, Q };

    public enum PremiumRewardTrait { Astrophysicist, Caregiver, Civilian, Telepath, Vulcan, Federation, Starfleet, WarpTheorist, Human, Cyberneticist, Communicator, Resourceful, Musician };

    public enum TutorialState { Completed };

    public enum FromEnum { Claimed, Granted, MemberJoinSuccessAfterInviteGidSome1047137872764935, MemberJoinSuccessAfterInviteGidSome888574811693058, Reverted };

    public enum Reason { Reward };

    public enum Specialized { Standard10XBundle, StandardConsumables10XBundle, StimpackBundle, Standard1xBundle };

    public enum GrantedSymbol { GiftDirectGameItem, GuildCreate, GuildSquadCreate, NinersAvatar };

    public partial struct Category
    {
        public long? Integer;
        public string String;

        public static implicit operator Category(long Integer) => new Category { Integer = Integer };
        public static implicit operator Category(string String) => new Category { String = String };
    }

    public partial class PlayerData
    {
        public static PlayerData FromJson(string json) => JsonConvert.DeserializeObject<PlayerData>(json, STTDataAnalyzer.Models.PlayerData.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PlayerData self) => JsonConvert.SerializeObject(self, STTDataAnalyzer.Models.PlayerData.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ChallengeSkillEnumConverter.Singleton,
                OperatorConverter.Singleton,
                SourceConverter.Singleton,
                FullNameEnumConverter.Singleton,
                AtlasInfoConverter.Singleton,
                VideoAdChronitonBoostRewardSymbolConverter.Singleton,
                PurpleNameConverter.Singleton,
                CategoryConverter.Singleton,
                FullNameConverter.Singleton,
                FluffyNameConverter.Singleton,
                PurpleSymbolConverter.Singleton,
                RewardTraitConverter.Singleton,
                PremiumRewardTraitConverter.Singleton,
                TutorialStateConverter.Singleton,
                FromEnumConverter.Singleton,
                ReasonConverter.Singleton,
                SpecializedConverter.Singleton,
                GrantedSymbolConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ChallengeSkillEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ChallengeSkillEnum) || t == typeof(ChallengeSkillEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "command_skill":
                    return ChallengeSkillEnum.CommandSkill;
                case "diplomacy_skill":
                    return ChallengeSkillEnum.DiplomacySkill;
                case "engineering_skill":
                    return ChallengeSkillEnum.EngineeringSkill;
                case "medicine_skill":
                    return ChallengeSkillEnum.MedicineSkill;
                case "science_skill":
                    return ChallengeSkillEnum.ScienceSkill;
                case "security_skill":
                    return ChallengeSkillEnum.SecuritySkill;
            }
            throw new Exception("Cannot unmarshal type ChallengeSkillEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ChallengeSkillEnum)untypedValue;
            switch (value)
            {
                case ChallengeSkillEnum.CommandSkill:
                    serializer.Serialize(writer, "command_skill");
                    return;
                case ChallengeSkillEnum.DiplomacySkill:
                    serializer.Serialize(writer, "diplomacy_skill");
                    return;
                case ChallengeSkillEnum.EngineeringSkill:
                    serializer.Serialize(writer, "engineering_skill");
                    return;
                case ChallengeSkillEnum.MedicineSkill:
                    serializer.Serialize(writer, "medicine_skill");
                    return;
                case ChallengeSkillEnum.ScienceSkill:
                    serializer.Serialize(writer, "science_skill");
                    return;
                case ChallengeSkillEnum.SecuritySkill:
                    serializer.Serialize(writer, "security_skill");
                    return;
            }
            throw new Exception("Cannot marshal type ChallengeSkillEnum");
        }

        public static readonly ChallengeSkillEnumConverter Singleton = new ChallengeSkillEnumConverter();
    }

    internal class OperatorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Operator) || t == typeof(Operator?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "increment":
                    return Operator.Increment;
                case "percent_decrease":
                    return Operator.PercentDecrease;
                case "percent_increase":
                    return Operator.PercentIncrease;
            }
            throw new Exception("Cannot unmarshal type Operator");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Operator)untypedValue;
            switch (value)
            {
                case Operator.Increment:
                    serializer.Serialize(writer, "increment");
                    return;
                case Operator.PercentDecrease:
                    serializer.Serialize(writer, "percent_decrease");
                    return;
                case Operator.PercentIncrease:
                    serializer.Serialize(writer, "percent_increase");
                    return;
            }
            throw new Exception("Cannot marshal type Operator");
        }

        public static readonly OperatorConverter Singleton = new OperatorConverter();
    }

    internal class SourceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Source) || t == typeof(Source?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "crew_collection":
                    return Source.CrewCollection;
                case "starbase":
                    return Source.Starbase;
            }
            throw new Exception("Cannot unmarshal type Source");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Source)untypedValue;
            switch (value)
            {
                case Source.CrewCollection:
                    serializer.Serialize(writer, "crew_collection");
                    return;
                case Source.Starbase:
                    serializer.Serialize(writer, "starbase");
                    return;
            }
            throw new Exception("Cannot marshal type Source");
        }

        public static readonly SourceConverter Singleton = new SourceConverter();
    }

    internal class FullNameEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FullNameEnum) || t == typeof(FullNameEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "10x Premium Shuttle Boost":
                    return FullNameEnum.The10XPremiumShuttleBoost;
                case "10x Standard Shuttle Boost":
                    return FullNameEnum.The10XStandardShuttleBoost;
                case "10x Premium Time Portal":
                    return FullNameEnum.The10XPremiumTimePortal;
                case "Chronitons":
                    return FullNameEnum.Chronitons;
                case "Dilithium":
                    return FullNameEnum.Dilithium;
                case "Dynamic Replicator Ration":
                    return FullNameEnum.DynamicReplicatorRation;
                case "Federation Credits":
                    return FullNameEnum.FederationCredits;
                case "Honor":
                    return FullNameEnum.Honor;
                case "Interstellar Medium":
                    return FullNameEnum.InterstellarMedium;
                case "Legendary Honorable Citation":
                    return FullNameEnum.LegendaryHonorableCitation;
                case "Merits":
                    return FullNameEnum.Merits;
                case "Premium Time Portal":
                    return FullNameEnum.PremiumTimePortal;
                case "Requisition Shuttle Tokens":
                    return FullNameEnum.RequisitionShuttleTokens;
                case "Reward Multiplier":
                    return FullNameEnum.RewardMultiplier;
                case "Twilight T'Pol":
                    return FullNameEnum.TwilightTPol;
                case "Leah Brahms":
                    return FullNameEnum.LeahBrahms;
                case "Captain Proton Rocket Ship Schematic":
                    return FullNameEnum.CaptainProtonRocketShipSchematic;
                case "Nyota Uhura":
                    return FullNameEnum.NyotaUhura;
            }
            throw new Exception("Cannot unmarshal type FullNameEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FullNameEnum)untypedValue;
            switch (value)
            {
                case FullNameEnum.The10XPremiumShuttleBoost:
                    serializer.Serialize(writer, "10x Premium Shuttle Boost");
                    return;
                case FullNameEnum.The10XPremiumTimePortal:
                    serializer.Serialize(writer, "10x Premium Time Portal");
                    return;
                case FullNameEnum.Chronitons:
                    serializer.Serialize(writer, "Chronitons");
                    return;
                case FullNameEnum.Dilithium:
                    serializer.Serialize(writer, "Dilithium");
                    return;
                case FullNameEnum.DynamicReplicatorRation:
                    serializer.Serialize(writer, "Dynamic Replicator Ration");
                    return;
                case FullNameEnum.FederationCredits:
                    serializer.Serialize(writer, "Federation Credits");
                    return;
                case FullNameEnum.Honor:
                    serializer.Serialize(writer, "Honor");
                    return;
                case FullNameEnum.InterstellarMedium:
                    serializer.Serialize(writer, "Interstellar Medium");
                    return;
                case FullNameEnum.LegendaryHonorableCitation:
                    serializer.Serialize(writer, "Legendary Honorable Citation");
                    return;
                case FullNameEnum.Merits:
                    serializer.Serialize(writer, "Merits");
                    return;
                case FullNameEnum.PremiumTimePortal:
                    serializer.Serialize(writer, "Premium Time Portal");
                    return;
                case FullNameEnum.RequisitionShuttleTokens:
                    serializer.Serialize(writer, "Requisition Shuttle Tokens");
                    return;
                case FullNameEnum.RewardMultiplier:
                    serializer.Serialize(writer, "Reward Multiplier");
                    return;
                case FullNameEnum.TwilightTPol:
                    serializer.Serialize(writer, "Twilight T'Pol");
                    return;
            }
            throw new Exception("Cannot marshal type FullNameEnum");
        }

        public static readonly FullNameEnumConverter Singleton = new FullNameEnumConverter();
    }

    internal class AtlasInfoConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AtlasInfo) || t == typeof(AtlasInfo?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "atlas_stt_forte_info":
                    return AtlasInfo.AtlasSttForteInfo;
                case "atlas_stt_icons2_info":
                    return AtlasInfo.AtlasSttIcons2Info;
                case "atlas_stt_icons_info":
                    return AtlasInfo.AtlasSttIconsInfo;
            }
            throw new Exception("Cannot unmarshal type AtlasInfo");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AtlasInfo)untypedValue;
            switch (value)
            {
                case AtlasInfo.AtlasSttForteInfo:
                    serializer.Serialize(writer, "atlas_stt_forte_info");
                    return;
                case AtlasInfo.AtlasSttIcons2Info:
                    serializer.Serialize(writer, "atlas_stt_icons2_info");
                    return;
                case AtlasInfo.AtlasSttIconsInfo:
                    serializer.Serialize(writer, "atlas_stt_icons_info");
                    return;
            }
            throw new Exception("Cannot marshal type AtlasInfo");
        }

        public static readonly AtlasInfoConverter Singleton = new AtlasInfoConverter();
    }

    internal class VideoAdChronitonBoostRewardSymbolConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(VideoAdChronitonBoostRewardSymbol) || t == typeof(VideoAdChronitonBoostRewardSymbol?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "energy":
                    return VideoAdChronitonBoostRewardSymbol.Energy;
                case "honor":
                    return VideoAdChronitonBoostRewardSymbol.Honor;
                case "honorable_citation_quality5":
                    return VideoAdChronitonBoostRewardSymbol.HonorableCitationQuality5;
                case "ism_subcoin":
                    return VideoAdChronitonBoostRewardSymbol.IsmSubcoin;
                case "nonpremium":
                    return VideoAdChronitonBoostRewardSymbol.Nonpremium;
                case "premium_10x_bundle":
                    return VideoAdChronitonBoostRewardSymbol.Premium10XBundle;
                case "premium_1x_bundle":
                    return VideoAdChronitonBoostRewardSymbol.Premium1XBundle;
                case "premium_consumables_10x_bundle":
                    return VideoAdChronitonBoostRewardSymbol.PremiumConsumables10XBundle;
                case "premium_earnable":
                    return VideoAdChronitonBoostRewardSymbol.PremiumEarnable;
                case "premium_purchasable":
                    return VideoAdChronitonBoostRewardSymbol.PremiumPurchasable;
                case "replicator_fuel_legendary":
                    return VideoAdChronitonBoostRewardSymbol.ReplicatorFuelLegendary;
                case "reward_multiplier_5_shuttle_consumable":
                    return VideoAdChronitonBoostRewardSymbol.RewardMultiplier5_ShuttleConsumable;
                case "shuttle_rental_tokens":
                    return VideoAdChronitonBoostRewardSymbol.ShuttleRentalTokens;
                case "tpol_twilight_crew":
                    return VideoAdChronitonBoostRewardSymbol.TpolTwilightCrew;
                case "standard_consumables_10x_bundle":
                    return VideoAdChronitonBoostRewardSymbol.StandardConsumables10Bundle;
                case "brahms_leah_crew":
                    return VideoAdChronitonBoostRewardSymbol.BrahmsLeahCrew;
                case "captain_proton_ship_schematic":
                    return VideoAdChronitonBoostRewardSymbol.CaptainProtonShipSchematic;
                case "uhura_stiv_crew":
                    return VideoAdChronitonBoostRewardSymbol.UhuraStivCrew;
            }
            throw new Exception("Cannot unmarshal type VideoAdChronitonBoostRewardSymbol");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (VideoAdChronitonBoostRewardSymbol)untypedValue;
            switch (value)
            {
                case VideoAdChronitonBoostRewardSymbol.Energy:
                    serializer.Serialize(writer, "energy");
                    return;
                case VideoAdChronitonBoostRewardSymbol.Honor:
                    serializer.Serialize(writer, "honor");
                    return;
                case VideoAdChronitonBoostRewardSymbol.HonorableCitationQuality5:
                    serializer.Serialize(writer, "honorable_citation_quality5");
                    return;
                case VideoAdChronitonBoostRewardSymbol.IsmSubcoin:
                    serializer.Serialize(writer, "ism_subcoin");
                    return;
                case VideoAdChronitonBoostRewardSymbol.Nonpremium:
                    serializer.Serialize(writer, "nonpremium");
                    return;
                case VideoAdChronitonBoostRewardSymbol.Premium10XBundle:
                    serializer.Serialize(writer, "premium_10x_bundle");
                    return;
                case VideoAdChronitonBoostRewardSymbol.Premium1XBundle:
                    serializer.Serialize(writer, "premium_1x_bundle");
                    return;
                case VideoAdChronitonBoostRewardSymbol.PremiumConsumables10XBundle:
                    serializer.Serialize(writer, "premium_consumables_10x_bundle");
                    return;
                case VideoAdChronitonBoostRewardSymbol.PremiumEarnable:
                    serializer.Serialize(writer, "premium_earnable");
                    return;
                case VideoAdChronitonBoostRewardSymbol.PremiumPurchasable:
                    serializer.Serialize(writer, "premium_purchasable");
                    return;
                case VideoAdChronitonBoostRewardSymbol.ReplicatorFuelLegendary:
                    serializer.Serialize(writer, "replicator_fuel_legendary");
                    return;
                case VideoAdChronitonBoostRewardSymbol.RewardMultiplier5_ShuttleConsumable:
                    serializer.Serialize(writer, "reward_multiplier_5_shuttle_consumable");
                    return;
                case VideoAdChronitonBoostRewardSymbol.ShuttleRentalTokens:
                    serializer.Serialize(writer, "shuttle_rental_tokens");
                    return;
                case VideoAdChronitonBoostRewardSymbol.TpolTwilightCrew:
                    serializer.Serialize(writer, "tpol_twilight_crew");
                    return;
            }
            throw new Exception("Cannot marshal type VideoAdChronitonBoostRewardSymbol");
        }

        public static readonly VideoAdChronitonBoostRewardSymbolConverter Singleton = new VideoAdChronitonBoostRewardSymbolConverter();
    }

    internal class PurpleNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PurpleName) || t == typeof(PurpleName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "10x P. Shuttle":
                    return PurpleName.The10XPShuttle;
                case "10x S. Shuttle":
                    return PurpleName.The10XSShuttle;
                case "10x Portal":
                    return PurpleName.The10XPortal;
                case "Augments":
                    return PurpleName.Augments;
                case "Chronitons":
                    return PurpleName.Chronitons;
                case "Credits":
                    return PurpleName.Credits;
                case "Dilithium":
                    return PurpleName.Dilithium;
                case "Hon. Citation":
                    return PurpleName.HonCitation;
                case "Honor":
                    return PurpleName.Honor;
                case "ISM":
                    return PurpleName.Ism;
                case "Merits":
                    return PurpleName.Merits;
                case "Portal":
                    return PurpleName.Portal;
                case "Replicator Fuel":
                    return PurpleName.ReplicatorFuel;
                case "Reward Multiplier":
                    return PurpleName.RewardMultiplier;
                case "T'Pol":
                    return PurpleName.TPol;
                case "Tokens":
                    return PurpleName.Tokens;
                case "Brahms":
                    return PurpleName.Brahms;
                case "Captain Proton Rocket Ship Schematic":
                    return PurpleName.CaptainProtonRocketShipSchematics;
                case "Uhura":
                    return PurpleName.Uhura;
            }
            throw new Exception("Cannot unmarshal type PurpleName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PurpleName)untypedValue;
            switch (value)
            {
                case PurpleName.The10XPShuttle:
                    serializer.Serialize(writer, "10x P. Shuttle");
                    return;
                case PurpleName.The10XPortal:
                    serializer.Serialize(writer, "10x Portal");
                    return;
                case PurpleName.Augments:
                    serializer.Serialize(writer, "Augments");
                    return;
                case PurpleName.Chronitons:
                    serializer.Serialize(writer, "Chronitons");
                    return;
                case PurpleName.Credits:
                    serializer.Serialize(writer, "Credits");
                    return;
                case PurpleName.Dilithium:
                    serializer.Serialize(writer, "Dilithium");
                    return;
                case PurpleName.HonCitation:
                    serializer.Serialize(writer, "Hon. Citation");
                    return;
                case PurpleName.Honor:
                    serializer.Serialize(writer, "Honor");
                    return;
                case PurpleName.Ism:
                    serializer.Serialize(writer, "ISM");
                    return;
                case PurpleName.Merits:
                    serializer.Serialize(writer, "Merits");
                    return;
                case PurpleName.Portal:
                    serializer.Serialize(writer, "Portal");
                    return;
                case PurpleName.ReplicatorFuel:
                    serializer.Serialize(writer, "Replicator Fuel");
                    return;
                case PurpleName.RewardMultiplier:
                    serializer.Serialize(writer, "Reward Multiplier");
                    return;
                case PurpleName.TPol:
                    serializer.Serialize(writer, "T'Pol");
                    return;
                case PurpleName.Tokens:
                    serializer.Serialize(writer, "Tokens");
                    return;
                case PurpleName.Brahms:
                    serializer.Serialize(writer, "Brahms");
                    return;
                case PurpleName.CaptainProtonRocketShipShcematics:
                    serializer.Serialize(writer, "Captain Proton Rocket Ship Schematics");
                    return;
            }
            throw new Exception("Cannot marshal type PurpleName");
        }

        public static readonly PurpleNameConverter Singleton = new PurpleNameConverter();
    }

    internal class CategoryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Category) || t == typeof(Category?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new Category { Integer = integerValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Category { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type Category");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Category)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type Category");
        }

        public static readonly CategoryConverter Singleton = new CategoryConverter();
    }

    internal class FullNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FullName) || t == typeof(FullName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "10x Premium Time Portal":
                    return FullName.The10XPremiumTimePortal;
                case "Advanced Tactical Training":
                    return FullName.AdvancedTacticalTraining;
                case "Captain Lucero":
                    return FullName.CaptainLucero;
                case "Captain Saru":
                    return FullName.CaptainSaru;
                case "Captain Sulu":
                    return FullName.CaptainSulu;
                case "Commander T'Pol":
                    return FullName.CommanderTPol;
                case "Dilithium":
                    return FullName.Dilithium;
                case "Dynamic Officer Training":
                    return FullName.DynamicOfficerTraining;
                case "Honor":
                    return FullName.Honor;
                case "Interstellar Medium":
                    return FullName.InterstellarMedium;
                case "Merits":
                    return FullName.Merits;
                case "Rarity Constellation":
                    return FullName.RarityConstellation;
                case "Skill Constellation":
                    return FullName.SkillConstellation;
                case "Tribble McCoy":
                    return FullName.TribbleMcCoy;
                case "Tribble Uhura":
                    return FullName.TribbleUhura;
                case "Tribble Chekov":
                    return FullName.TribbleChekov;
                case "Trader Odo":
                    return FullName.TraderOdo;
                case "Little John Riker":
                    return FullName.LittleJohnRiker;
                case "Tourist Quark":
                    return FullName.TouristQuark;
                case "Prophet Kira":
                    return FullName.ProphetKira;
                case "Niners Kira Nerys":
                    return FullName.NinersKiraNerys;
                case "Racquetball O'Brien":
                    return FullName.RacketballOBrien;
                case "Time Loop Mudd":
                    return FullName.TimeLoopMudd;
                case "Union Q":
                    return FullName.UnionQ;
            }

            Clipboard.SetText(value);

            throw new Exception($"Cannot unmarshal type FullName ({value})");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FullName)untypedValue;
            switch (value)
            {
                case FullName.The10XPremiumTimePortal:
                    serializer.Serialize(writer, "10x Premium Time Portal");
                    return;
                case FullName.AdvancedTacticalTraining:
                    serializer.Serialize(writer, "Advanced Tactical Training");
                    return;
                case FullName.CaptainSaru:
                    serializer.Serialize(writer, "Captain Saru");
                    return;
                case FullName.CommanderTPol:
                    serializer.Serialize(writer, "Commander T'Pol");
                    return;
                case FullName.Dilithium:
                    serializer.Serialize(writer, "Dilithium");
                    return;
                case FullName.DynamicOfficerTraining:
                    serializer.Serialize(writer, "Dynamic Officer Training");
                    return;
                case FullName.Honor:
                    serializer.Serialize(writer, "Honor");
                    return;
                case FullName.InterstellarMedium:
                    serializer.Serialize(writer, "Interstellar Medium");
                    return;
                case FullName.Merits:
                    serializer.Serialize(writer, "Merits");
                    return;
                case FullName.RarityConstellation:
                    serializer.Serialize(writer, "Rarity Constellation");
                    return;
                case FullName.SkillConstellation:
                    serializer.Serialize(writer, "Skill Constellation");
                    return;
            }
            throw new Exception("Cannot marshal type FullName");
        }

        public static readonly FullNameConverter Singleton = new FullNameConverter();
    }

    internal class FluffyNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FluffyName) || t == typeof(FluffyName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "10x Portal":
                    return FluffyName.The10XPortal;
                case "Dilithium":
                    return FluffyName.Dilithium;
                case "Honor":
                    return FluffyName.Honor;
                case "ISM":
                    return FluffyName.Ism;
                case "Lucero":
                    return FluffyName.Lucero;
                case "McCoy":
                    return FluffyName.McCoy;
                case "Merits":
                    return FluffyName.Merits;
                case "Rarity":
                    return FluffyName.Rarity;
                case "Saru":
                    return FluffyName.Saru;
                case "Skill":
                    return FluffyName.Skill;
                case "Sulu":
                    return FluffyName.Sulu;
                case "T'Pol":
                    return FluffyName.TPol;
                case "Training":
                    return FluffyName.Training;
                case "Uhura":
                    return FluffyName.Uhura;
                case "Chekov":
                    return FluffyName.Chekov;
                case "Odo":
                    return FluffyName.Odo;
                case "Riker":
                    return FluffyName.Riker;
                case "Quark":
                    return FluffyName.Quark;
                case "Kira":
                    return FluffyName.Kira;
                case "O'Brien":
                    return FluffyName.OBrien;
                case "Mudd":
                    return FluffyName.Mudd;
                case "Q":
                    return FluffyName.Q;
            }

            Clipboard.SetText(value);

            throw new Exception($"Cannot unmarshal type FluffyName ({value})");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FluffyName)untypedValue;
            switch (value)
            {
                case FluffyName.The10XPortal:
                    serializer.Serialize(writer, "10x Portal");
                    return;
                case FluffyName.Dilithium:
                    serializer.Serialize(writer, "Dilithium");
                    return;
                case FluffyName.Honor:
                    serializer.Serialize(writer, "Honor");
                    return;
                case FluffyName.Ism:
                    serializer.Serialize(writer, "ISM");
                    return;
                case FluffyName.Merits:
                    serializer.Serialize(writer, "Merits");
                    return;
                case FluffyName.Rarity:
                    serializer.Serialize(writer, "Rarity");
                    return;
                case FluffyName.Saru:
                    serializer.Serialize(writer, "Saru");
                    return;
                case FluffyName.Skill:
                    serializer.Serialize(writer, "Skill");
                    return;
                case FluffyName.TPol:
                    serializer.Serialize(writer, "T'Pol");
                    return;
                case FluffyName.Training:
                    serializer.Serialize(writer, "Training");
                    return;
            }
            throw new Exception("Cannot marshal type FluffyName");
        }

        public static readonly FluffyNameConverter Singleton = new FluffyNameConverter();
    }

    internal class PurpleSymbolConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PurpleSymbol) || t == typeof(PurpleSymbol?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "dsc_lucero_captain_crew":
                    return PurpleSymbol.DscLuceroCaptainCrew;
                case "dsc_saru_captain_crew":
                    return PurpleSymbol.DscSaruCaptainCrew;
                case "honor":
                    return PurpleSymbol.Honor;
                case "huge_production_training":
                    return PurpleSymbol.HugeProductionTraining;
                case "ism_subcoin":
                    return PurpleSymbol.IsmSubcoin;
                case "mccoy_tribble_crew":
                    return PurpleSymbol.MccoyTribbleCrew;
                case "mega_production_training":
                    return PurpleSymbol.MegaProductionTraining;
                case "premium_10x_bundle":
                    return PurpleSymbol.Premium10XBundle;
                case "premium_earnable":
                    return PurpleSymbol.PremiumEarnable;
                case "premium_purchasable":
                    return PurpleSymbol.PremiumPurchasable;
                case "rarity_keystone_crate":
                    return PurpleSymbol.RarityKeystoneCrate;
                case "skill_keystone_crate":
                    return PurpleSymbol.SkillKeystoneCrate;
                case "sulu_captain_crew":
                    return PurpleSymbol.SuluCaptainCrew;
                case "tpol_commander_crew":
                    return PurpleSymbol.TpolCommanderCrew;
                case "uhura_tribble_crew":
                    return PurpleSymbol.UhuraTribbleCrew;
                case "chekov_tribble_crew":
                    return PurpleSymbol.ChekovTribbleCrew;
                case "odo_tos_crew":
                    return PurpleSymbol.OdoTosCrew;
                case "riker_littlejohn_crew":
                    return PurpleSymbol.RikerLittlejohnCrew;
                case "quark_risa_crew":
                    return PurpleSymbol.QuarkRisaCrew;
                case "kira_prophet_crew":
                    return PurpleSymbol.KiraProphetCrew;
                case "kira_niners_crew":
                    return PurpleSymbol.KiraNinersCrew;
                case "obrien_racquetball_crew":
                    return PurpleSymbol.OBrienRacketballCrew;
                case "dsc_mudd_takeover_crew":
                    return PurpleSymbol.DscMuddTakeoverCrew;
                case "q_union_crew":
                    return PurpleSymbol.QUnionCrew;
                case "uhura_wrathofkhan_crew":
                    return PurpleSymbol.UnuraWrathOfKhanCrew;
            }

            Clipboard.SetText(value);

            throw new Exception($"Cannot unmarshal type PurpleSymbol ({value})");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PurpleSymbol)untypedValue;
            switch (value)
            {
                case PurpleSymbol.DscSaruCaptainCrew:
                    serializer.Serialize(writer, "dsc_saru_captain_crew");
                    return;
                case PurpleSymbol.Honor:
                    serializer.Serialize(writer, "honor");
                    return;
                case PurpleSymbol.HugeProductionTraining:
                    serializer.Serialize(writer, "huge_production_training");
                    return;
                case PurpleSymbol.IsmSubcoin:
                    serializer.Serialize(writer, "ism_subcoin");
                    return;
                case PurpleSymbol.MegaProductionTraining:
                    serializer.Serialize(writer, "mega_production_training");
                    return;
                case PurpleSymbol.Premium10XBundle:
                    serializer.Serialize(writer, "premium_10x_bundle");
                    return;
                case PurpleSymbol.PremiumEarnable:
                    serializer.Serialize(writer, "premium_earnable");
                    return;
                case PurpleSymbol.PremiumPurchasable:
                    serializer.Serialize(writer, "premium_purchasable");
                    return;
                case PurpleSymbol.RarityKeystoneCrate:
                    serializer.Serialize(writer, "rarity_keystone_crate");
                    return;
                case PurpleSymbol.SkillKeystoneCrate:
                    serializer.Serialize(writer, "skill_keystone_crate");
                    return;
                case PurpleSymbol.TpolCommanderCrew:
                    serializer.Serialize(writer, "tpol_commander_crew");
                    return;
            }
            throw new Exception("Cannot marshal type PurpleSymbol");
        }

        public static readonly PurpleSymbolConverter Singleton = new PurpleSymbolConverter();
    }

    internal class RewardTraitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RewardTrait) || t == typeof(RewardTrait?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "astrophysicist":
                    return RewardTrait.Astrophysicist;
                case "communicator":
                    return RewardTrait.Communicator;
                case "doctor":
                    return RewardTrait.Doctor;
                case "exobiology":
                    return RewardTrait.Exobiology;
                case "explorer":
                    return RewardTrait.Explorer;
                case "federation":
                    return RewardTrait.Federation;
                case "human":
                    return RewardTrait.Human;
                case "inspiring":
                    return RewardTrait.Inspiring;
                case "kelpien":
                    return RewardTrait.Kelpien;
                case "pilot":
                    return RewardTrait.Pilot;
                case "resourceful":
                    return RewardTrait.Resourceful;
                case "starfleet":
                    return RewardTrait.Starfleet;
                case "survivalist":
                    return RewardTrait.Survivalist;
                case "tactician":
                    return RewardTrait.Tactician;
                case "telepath":
                    return RewardTrait.Telepath;
                case "tribbled":
                    return RewardTrait.Tribbled;
                case "veteran":
                    return RewardTrait.Veteran;
                case "vulcan":
                    return RewardTrait.Vulcan;
                case "changeling":
                    return RewardTrait.Changeling;
                case "costumed":
                    return RewardTrait.Costumed;
                case "merchant":
                    return RewardTrait.Merchant;
                case "shapeshifter":
                    return RewardTrait.Shapeshifter;
                case "thief":
                    return RewardTrait.Thief;
                case "ferengi":
                    return RewardTrait.Ferengi;
                case "scoundrel":
                    return RewardTrait.Scoundrel;
                case "desperate":
                    return RewardTrait.Desperate;
                case "romantic":
                    return RewardTrait.Romantic;
                case "gambler":
                    return RewardTrait.Gambler;
                case "civilian":
                    return RewardTrait.Civilian;
                case "bajoran":
                    return RewardTrait.Bajoran;
                case "spiritual":
                    return RewardTrait.Spiritual;
                case "maverick":
                    return RewardTrait.Maverick;
                case "athlete":
                    return RewardTrait.Athlete;
                case "duelist":
                    return RewardTrait.Duelist;
                case "crafty":
                    return RewardTrait.Crafty;
                case "smuggler":
                    return RewardTrait.Smuggler;
                case "q":
                    return RewardTrait.Q;
            }

            Clipboard.SetText(value);

            throw new Exception($"Cannot unmarshal type RewardTrait ({value})");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RewardTrait)untypedValue;
            switch (value)
            {
                case RewardTrait.Astrophysicist:
                    serializer.Serialize(writer, "astrophysicist");
                    return;
                case RewardTrait.Exobiology:
                    serializer.Serialize(writer, "exobiology");
                    return;
                case RewardTrait.Federation:
                    serializer.Serialize(writer, "federation");
                    return;
                case RewardTrait.Inspiring:
                    serializer.Serialize(writer, "inspiring");
                    return;
                case RewardTrait.Kelpien:
                    serializer.Serialize(writer, "kelpien");
                    return;
                case RewardTrait.Starfleet:
                    serializer.Serialize(writer, "starfleet");
                    return;
                case RewardTrait.Telepath:
                    serializer.Serialize(writer, "telepath");
                    return;
                case RewardTrait.Vulcan:
                    serializer.Serialize(writer, "vulcan");
                    return;
            }
            throw new Exception("Cannot marshal type RewardTrait");
        }

        public static readonly RewardTraitConverter Singleton = new RewardTraitConverter();
    }

    internal class PremiumRewardTraitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PremiumRewardTrait) || t == typeof(PremiumRewardTrait?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "astrophysicist":
                    return PremiumRewardTrait.Astrophysicist;
                case "caregiver":
                    return PremiumRewardTrait.Caregiver;
                case "civilian":
                    return PremiumRewardTrait.Civilian;
                case "telepath":
                    return PremiumRewardTrait.Telepath;
                case "vulcan":
                    return PremiumRewardTrait.Vulcan;
                case "federation":
                    return PremiumRewardTrait.Federation;
                case "starfleet":
                    return PremiumRewardTrait.Starfleet;
                case "warp_theorist":
                    return PremiumRewardTrait.WarpTheorist;
                case "human":
                    return PremiumRewardTrait.Human;
                case "cyberneticist":
                    return PremiumRewardTrait.Cyberneticist;
                case "communicator":
                    return PremiumRewardTrait.Communicator;
                case "resourceful":
                    return PremiumRewardTrait.Resourceful;
                case "musician":
                    return PremiumRewardTrait.Musician;
            }
            throw new Exception("Cannot unmarshal type PremiumRewardTrait");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PremiumRewardTrait)untypedValue;
            switch (value)
            {
                case PremiumRewardTrait.Astrophysicist:
                    serializer.Serialize(writer, "astrophysicist");
                    return;
                case PremiumRewardTrait.Caregiver:
                    serializer.Serialize(writer, "caregiver");
                    return;
                case PremiumRewardTrait.Civilian:
                    serializer.Serialize(writer, "civilian");
                    return;
                case PremiumRewardTrait.Telepath:
                    serializer.Serialize(writer, "telepath");
                    return;
                case PremiumRewardTrait.Vulcan:
                    serializer.Serialize(writer, "vulcan");
                    return;
            }
            throw new Exception("Cannot marshal type PremiumRewardTrait");
        }

        public static readonly PremiumRewardTraitConverter Singleton = new PremiumRewardTraitConverter();
    }

    internal class TutorialStateConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TutorialState) || t == typeof(TutorialState?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "completed")
            {
                return TutorialState.Completed;
            }
            throw new Exception("Cannot unmarshal type TutorialState");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TutorialState)untypedValue;
            if (value == TutorialState.Completed)
            {
                serializer.Serialize(writer, "completed");
                return;
            }
            throw new Exception("Cannot marshal type TutorialState");
        }

        public static readonly TutorialStateConverter Singleton = new TutorialStateConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class FromEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FromEnum) || t == typeof(FromEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Member join success after invite {gid=Some(1047137872764935)}":
                    return FromEnum.MemberJoinSuccessAfterInviteGidSome1047137872764935;
                case "Member join success after invite {gid=Some(888574811693058)}":
                    return FromEnum.MemberJoinSuccessAfterInviteGidSome888574811693058;
                case "claimed":
                    return FromEnum.Claimed;
                case "granted":
                    return FromEnum.Granted;
                case "reverted":
                    return FromEnum.Reverted;
            }
            throw new Exception("Cannot unmarshal type FromEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FromEnum)untypedValue;
            switch (value)
            {
                case FromEnum.MemberJoinSuccessAfterInviteGidSome1047137872764935:
                    serializer.Serialize(writer, "Member join success after invite {gid=Some(1047137872764935)}");
                    return;
                case FromEnum.MemberJoinSuccessAfterInviteGidSome888574811693058:
                    serializer.Serialize(writer, "Member join success after invite {gid=Some(888574811693058)}");
                    return;
                case FromEnum.Claimed:
                    serializer.Serialize(writer, "claimed");
                    return;
                case FromEnum.Granted:
                    serializer.Serialize(writer, "granted");
                    return;
                case FromEnum.Reverted:
                    serializer.Serialize(writer, "reverted");
                    return;
            }
            throw new Exception("Cannot marshal type FromEnum");
        }

        public static readonly FromEnumConverter Singleton = new FromEnumConverter();
    }

    internal class ReasonConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Reason) || t == typeof(Reason?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "reward")
            {
                return Reason.Reward;
            }
            throw new Exception("Cannot unmarshal type Reason");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Reason)untypedValue;
            if (value == Reason.Reward)
            {
                serializer.Serialize(writer, "reward");
                return;
            }
            throw new Exception("Cannot marshal type Reason");
        }

        public static readonly ReasonConverter Singleton = new ReasonConverter();
    }

    internal class SpecializedConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Specialized) || t == typeof(Specialized?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "standard_10x_bundle":
                    return Specialized.Standard10XBundle;
                case "standard_consumables_10x_bundle":
                    return Specialized.StandardConsumables10XBundle;
                case "stimpack_bundle":
                    return Specialized.StimpackBundle;
                case "standard_1x_bundle":
                    return Specialized.Standard1xBundle;
            }
            throw new Exception("Cannot unmarshal type Specialized");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Specialized)untypedValue;
            switch (value)
            {
                case Specialized.Standard10XBundle:
                    serializer.Serialize(writer, "standard_10x_bundle");
                    return;
                case Specialized.StandardConsumables10XBundle:
                    serializer.Serialize(writer, "standard_consumables_10x_bundle");
                    return;
                case Specialized.StimpackBundle:
                    serializer.Serialize(writer, "stimpack_bundle");
                    return;
            }
            throw new Exception("Cannot marshal type Specialized");
        }

        public static readonly SpecializedConverter Singleton = new SpecializedConverter();
    }

    internal class GrantedSymbolConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GrantedSymbol) || t == typeof(GrantedSymbol?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "gift_direct_game_item":
                    return GrantedSymbol.GiftDirectGameItem;
                case "guild_create":
                    return GrantedSymbol.GuildCreate;
                case "guild_squad_create":
                    return GrantedSymbol.GuildSquadCreate;
                case "niners_avatar":
                    return GrantedSymbol.NinersAvatar;
            }
            throw new Exception("Cannot unmarshal type GrantedSymbol");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (GrantedSymbol)untypedValue;
            switch (value)
            {
                case GrantedSymbol.GiftDirectGameItem:
                    serializer.Serialize(writer, "gift_direct_game_item");
                    return;
                case GrantedSymbol.GuildCreate:
                    serializer.Serialize(writer, "guild_create");
                    return;
                case GrantedSymbol.GuildSquadCreate:
                    serializer.Serialize(writer, "guild_squad_create");
                    return;
                case GrantedSymbol.NinersAvatar:
                    serializer.Serialize(writer, "niners_avatar");
                    return;
            }
            throw new Exception("Cannot marshal type GrantedSymbol");
        }

        public static readonly GrantedSymbolConverter Singleton = new GrantedSymbolConverter();
    }
}
