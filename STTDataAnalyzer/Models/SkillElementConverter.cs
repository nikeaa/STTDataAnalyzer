namespace STTDataAnalyzer
{

	// <auto-generated />
	//
	// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
	//
	//    using SttUser;
	//
	//    var welcome = Welcome.FromJson(jsonString);

	namespace SttUser
	{
		using Newtonsoft.Json;
		using System;

		internal class SkillElementConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(SkillElement) || t == typeof(SkillElement?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "command_skill":
						return SkillElement.CommandSkill;
					case "diplomacy_skill":
						return SkillElement.DiplomacySkill;
					case "engineering_skill":
						return SkillElement.EngineeringSkill;
					case "medicine_skill":
						return SkillElement.MedicineSkill;
					case "science_skill":
						return SkillElement.ScienceSkill;
					case "security_skill":
						return SkillElement.SecuritySkill;
				}
				throw new Exception("Cannot unmarshal type SkillElement");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (SkillElement)untypedValue;
				switch (value)
				{
					case SkillElement.CommandSkill:
						serializer.Serialize(writer, "command_skill");
						return;
					case SkillElement.DiplomacySkill:
						serializer.Serialize(writer, "diplomacy_skill");
						return;
					case SkillElement.EngineeringSkill:
						serializer.Serialize(writer, "engineering_skill");
						return;
					case SkillElement.MedicineSkill:
						serializer.Serialize(writer, "medicine_skill");
						return;
					case SkillElement.ScienceSkill:
						serializer.Serialize(writer, "science_skill");
						return;
					case SkillElement.SecuritySkill:
						serializer.Serialize(writer, "security_skill");
						return;
				}
				throw new Exception("Cannot marshal type SkillElement");
			}

			public static readonly SkillElementConverter Singleton = new SkillElementConverter();
		}
	}
}
