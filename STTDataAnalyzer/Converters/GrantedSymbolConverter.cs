namespace STTDataAnalyzer
{

	// <auto-generated />
	//
	// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
	//
	//    using SttUser;
	//
	//    var welcome = Welcome.FromJson(jsonString);

	namespace SttUser
	{
		using Newtonsoft.Json;
		using System;

		internal class GrantedSymbolConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(GrantedSymbol) || t == typeof(GrantedSymbol?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "gift_direct_game_item":
						return GrantedSymbol.GiftDirectGameItem;
					case "guild_create":
						return GrantedSymbol.GuildCreate;
					case "guild_squad_create":
						return GrantedSymbol.GuildSquadCreate;
					case "monthly_card_daily_collect":
						return GrantedSymbol.MonthlyCardDailyCollect;
					case "niners_avatar":
						return GrantedSymbol.NinersAvatar;
				}
				throw new Exception("Cannot unmarshal type GrantedSymbol");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (GrantedSymbol)untypedValue;
				switch (value)
				{
					case GrantedSymbol.GiftDirectGameItem:
						serializer.Serialize(writer, "gift_direct_game_item");
						return;
					case GrantedSymbol.GuildCreate:
						serializer.Serialize(writer, "guild_create");
						return;
					case GrantedSymbol.GuildSquadCreate:
						serializer.Serialize(writer, "guild_squad_create");
						return;
				}
				throw new Exception("Cannot marshal type GrantedSymbol");
			}

			public static readonly GrantedSymbolConverter Singleton = new GrantedSymbolConverter();
		}
	}
}
