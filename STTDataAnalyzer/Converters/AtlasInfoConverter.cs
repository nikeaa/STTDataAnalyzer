namespace STTDataAnalyzer
{

	// <auto-generated />
	//
	// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
	//
	//    using SttUser;
	//
	//    var welcome = Welcome.FromJson(jsonString);

	namespace SttUser
	{
		using Newtonsoft.Json;
		using System;

		internal class AtlasInfoConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(AtlasInfo) || t == typeof(AtlasInfo?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "atlas_stt_icons2_info":
						return AtlasInfo.AtlasSttIcons2Info;
					case "atlas_stt_icons_info":
						return AtlasInfo.AtlasSttIconsInfo;
				}
				throw new Exception("Cannot unmarshal type AtlasInfo");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (AtlasInfo)untypedValue;
				switch (value)
				{
					case AtlasInfo.AtlasSttIcons2Info:
						serializer.Serialize(writer, "atlas_stt_icons2_info");
						return;
					case AtlasInfo.AtlasSttIconsInfo:
						serializer.Serialize(writer, "atlas_stt_icons_info");
						return;
				}
				throw new Exception("Cannot marshal type AtlasInfo");
			}

			public static readonly AtlasInfoConverter Singleton = new AtlasInfoConverter();
		}
	}
}
