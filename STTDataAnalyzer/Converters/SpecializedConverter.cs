namespace STTDataAnalyzer
{

	// <auto-generated />
	//
	// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
	//
	//    using SttUser;
	//
	//    var welcome = Welcome.FromJson(jsonString);

	namespace SttUser
	{
		using Newtonsoft.Json;
		using System;

		internal class SpecializedConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(Specialized) || t == typeof(Specialized?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "premium_10x_bundle":
						return Specialized.Premium10XBundle;
					case "premium_1x_bundle":
						return Specialized.Premium1XBundle;
					case "premium_consumables_10x_bundle":
						return Specialized.PremiumConsumables10XBundle;
					case "standard_10x_bundle":
						return Specialized.Standard10XBundle;
					case "standard_consumables_10x_bundle":
						return Specialized.StandardConsumables10XBundle;
					case "stimpack_bundle":
						return Specialized.StimpackBundle;
					case "standard_1x_bundle":
						return Specialized.Standard1XBundle;
					case "minor_consumables_10x_bundle":
						return Specialized.MinorConsumables10XBundle;
				}
				throw new Exception("Cannot unmarshal type Specialized");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (Specialized)untypedValue;
				switch (value)
				{
					case Specialized.Premium10XBundle:
						serializer.Serialize(writer, "premium_10x_bundle");
						return;
					case Specialized.Premium1XBundle:
						serializer.Serialize(writer, "premium_1x_bundle");
						return;
					case Specialized.PremiumConsumables10XBundle:
						serializer.Serialize(writer, "premium_consumables_10x_bundle");
						return;
					case Specialized.Standard10XBundle:
						serializer.Serialize(writer, "standard_10x_bundle");
						return;
					case Specialized.StandardConsumables10XBundle:
						serializer.Serialize(writer, "standard_consumables_10x_bundle");
						return;
					case Specialized.StimpackBundle:
						serializer.Serialize(writer, "stimpack_bundle");
						return;
				}
				throw new Exception("Cannot marshal type Specialized");
			}

			public static readonly SpecializedConverter Singleton = new SpecializedConverter();
		}
	}
}
