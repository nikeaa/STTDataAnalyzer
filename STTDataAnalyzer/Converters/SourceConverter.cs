namespace STTDataAnalyzer
{

	// <auto-generated />
	//
	// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
	//
	//    using SttUser;
	//
	//    var welcome = Welcome.FromJson(jsonString);

	namespace SttUser
	{
		using Newtonsoft.Json;
		using System;

		internal class SourceConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(Source) || t == typeof(Source?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "crew_collection":
						return Source.CrewCollection;
					case "starbase":
						return Source.Starbase;
				}
				throw new Exception("Cannot unmarshal type Source");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (Source)untypedValue;
				switch (value)
				{
					case Source.CrewCollection:
						serializer.Serialize(writer, "crew_collection");
						return;
					case Source.Starbase:
						serializer.Serialize(writer, "starbase");
						return;
				}
				throw new Exception("Cannot marshal type Source");
			}

			public static readonly SourceConverter Singleton = new SourceConverter();
		}
	}
}
