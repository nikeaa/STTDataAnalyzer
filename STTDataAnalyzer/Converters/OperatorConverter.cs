namespace STTDataAnalyzer
{

	// <auto-generated />
	//
	// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
	//
	//    using SttUser;
	//
	//    var welcome = Welcome.FromJson(jsonString);

	namespace SttUser
	{
		using Newtonsoft.Json;
		using System;

		internal class OperatorConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(Operator) || t == typeof(Operator?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "increment":
						return Operator.Increment;
					case "multiplier":
						return Operator.Multiplier;
					case "percent_decrease":
						return Operator.PercentDecrease;
					case "percent_increase":
						return Operator.PercentIncrease;
				}
				throw new Exception("Cannot unmarshal type Operator");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (Operator)untypedValue;
				switch (value)
				{
					case Operator.Increment:
						serializer.Serialize(writer, "increment");
						return;
					case Operator.Multiplier:
						serializer.Serialize(writer, "multiplier");
						return;
					case Operator.PercentDecrease:
						serializer.Serialize(writer, "percent_decrease");
						return;
					case Operator.PercentIncrease:
						serializer.Serialize(writer, "percent_increase");
						return;
				}
				throw new Exception("Cannot marshal type Operator");
			}

			public static readonly OperatorConverter Singleton = new OperatorConverter();
		}
	}
}
