namespace STTDataAnalyzer
{

	// <auto-generated />
	//
	// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
	//
	//    using SttUser;
	//
	//    var welcome = Welcome.FromJson(jsonString);

	namespace SttUser
	{
		using Newtonsoft.Json;
		using System;

		internal class FullNameEnumConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(FullNameEnum) || t == typeof(FullNameEnum?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "Advanced Replicator Ration":
						return FullNameEnum.AdvancedReplicatorRation;
					case "Chronitons":
						return FullNameEnum.Chronitons;
					case "Dilithium":
						return FullNameEnum.Dilithium;
					case "Federation Credits":
						return FullNameEnum.FederationCredits;
					case "Honor":
						return FullNameEnum.Honor;
					case "Merits":
						return FullNameEnum.Merits;
					case "Premium Time Portal":
						return FullNameEnum.PremiumTimePortal;
					case "10x Premium Time Portal":
						return FullNameEnum.PremiumTimePortal10x;
					case "Dynamic Replicator Ration":
						return FullNameEnum.DynamicReplicatorRation;
					case "The Niners":
						return FullNameEnum.TheNiners;
				}
				throw new Exception("Cannot unmarshal type FullNameEnum");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (FullNameEnum)untypedValue;
				switch (value)
				{
					case FullNameEnum.AdvancedReplicatorRation:
						serializer.Serialize(writer, "Advanced Replicator Ration");
						return;
					case FullNameEnum.Chronitons:
						serializer.Serialize(writer, "Chronitons");
						return;
					case FullNameEnum.Dilithium:
						serializer.Serialize(writer, "Dilithium");
						return;
					case FullNameEnum.FederationCredits:
						serializer.Serialize(writer, "Federation Credits");
						return;
					case FullNameEnum.Honor:
						serializer.Serialize(writer, "Honor");
						return;
					case FullNameEnum.Merits:
						serializer.Serialize(writer, "Merits");
						return;
					case FullNameEnum.PremiumTimePortal:
						serializer.Serialize(writer, "Premium Time Portal");
						return;
				}
				throw new Exception("Cannot marshal type FullNameEnum");
			}

			public static readonly FullNameEnumConverter Singleton = new FullNameEnumConverter();
		}
	}
}
