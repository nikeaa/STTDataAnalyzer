using System;
using System.Collections.Generic;
using System.Linq;

namespace STTDataAnalyzer
{
	public class Program
	{
		private static SttUser.Welcome sttUser;

		private static void Main(string[] args)
		{
			string data = System.IO.File.ReadAllText(@"C:\Users\nikea\Desktop\Crew.json");
			sttUser = SttUser.Welcome.FromJson(data);

			var items = sttUser.ItemArchetypeCache.Archetypes;
			foreach (var iitem in items)
			{
				Console.WriteLine(iitem.Id + " - " + iitem.Name + " (" + iitem.Rarity + ")");
			}

			IEnumerable<SttUser.Crew> crews = sttUser.Player.Character.Crew.Where(t => t.Name == "Covert Operative Leland");
			foreach (SttUser.Crew crew in crews.Where(t => t.Level < 100))
			{
				Console.Write(crew.Name + " - ");
				var x = crew.Equipment;
				for (int i = 0; i < 4; i++)
				{
					if (!x.Select(t => t).Any(t => t[1] == crew.EquipmentSlots[i].Archetype))
					{
						Console.Write(sttUser.ItemArchetypeCache.Archetypes.Where(t => t.Id == crew.EquipmentSlots[i].Archetype).SingleOrDefault().Name + "; ");
					}
				}
				Console.WriteLine();
			}

			var item = sttUser.ItemArchetypeCache.Archetypes.Find(a => a.Name == "Leland's Covert Operative Outfit" && a.Rarity == 4);

			DisplayRecipe(item, 0, 1);

			//for (int i = 0; i < item0.Recipe.Demands.Count; i++){
			//	Console.WriteLine("Id = " + item0.Recipe.Demands[i].ArchetypeId);
			//	var item00 = welcome.ItemArchetypeCache.Archetypes.Find(a => a.Id == item0.Recipe.Demands[i].ArchetypeId);
			//	Console.WriteLine("Name = " + item0.Recipe.Demands[i].Count + " - " + item00.Name);
			//}

			//var item1 = welcome.ItemArchetypeCache.Archetypes.Find(a => a.Id == 6360);
			//for (int i = 0; i < item1.Recipe.Demands.Count; i++)
			//{
			//	Console.WriteLine("Id = " + item1.Recipe.Demands[i].ArchetypeId);
			//	var item11 = welcome.ItemArchetypeCache.Archetypes.Find(a => a.Id == item1.Recipe.Demands[i].ArchetypeId);
			//	Console.WriteLine("Name = " + item1.Recipe.Demands[i].Count + " - " + item11.Name);
			//}

			//Console.WriteLine(item0.Id);
			//Console.WriteLine(item0.Name);

			//Console.WriteLine(item0.Recipe.Demands[0].ArchetypeId);
			//var item00 = welcome.ItemArchetypeCache.Archetypes.Find(a => a.Id == item0.Recipe.Demands[0].ArchetypeId);
			//Console.WriteLine(item00.Name);
			//Console.WriteLine(item0.Recipe.Demands[1].ArchetypeId);
			//Console.WriteLine(item0.Recipe.Demands[2].ArchetypeId);
			//Console.WriteLine();

			//var item1 = welcome.ItemArchetypeCache.Archetypes.Find(a => a.Name == "Authorization Code");
			//Console.WriteLine(item1.Id);

			Console.ReadLine();
		}

		private static void DisplayRecipe(SttUser.Archetype item, int level, int quantity)
		{
			Console.WriteLine(new string(' ', level * 2) + quantity + " - " + item.Name + " " + new string('*', (int)item.Rarity));
			if (item.Recipe != null)
			{
				for (int i = 0; i < item.Recipe.Demands.Count; i++)
				{
					var subItem = sttUser.ItemArchetypeCache.Archetypes.Find(a => a.Id == item.Recipe.Demands[i].ArchetypeId);
					if (subItem != null)
					{
						DisplayRecipe(subItem, level + 1, (int)item.Recipe.Demands[i].Count);
					}
					else
					{
						Console.WriteLine(new string(' ', (level + 1) * 2) + item.Recipe.Demands[i].Count + " - Unknown Item #" + item.Recipe.Demands[i].ArchetypeId);
					}
					//var item00 = sttUser.ItemArchetypeCache.Archetypes.Find(a => a.Id == item.Recipe.Demands[i].ArchetypeId);
					//Console.WriteLine("Name = " + item0.Recipe.Demands[i].Count + " - " + item00.Name);
				}
			}
		}
	}

	// <auto-generated />
	//
	// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
	//
	//    using SttUser;
	//
	//    var welcome = Welcome.FromJson(jsonString);

	namespace SttUser
	{
		using Newtonsoft.Json;
		using Newtonsoft.Json.Converters;
		using System;
		using System.Collections.Generic;
		using System.Globalization;

		public partial class Welcome
		{
			[JsonProperty("action")]
			public string Action { get; set; }

			[JsonProperty("player")]
			public Player Player { get; set; }

			[JsonProperty("item_archetype_cache")]
			public ItemArchetypeCache ItemArchetypeCache { get; set; }
		}

		public partial class ItemArchetypeCache
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("archetypes")]
			public List<Archetype> Archetypes { get; set; }
		}

		public partial class Archetype
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("type")]
			public long Type { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("icon")]
			public IconClass Icon { get; set; }

			[JsonProperty("flavor")]
			public string Flavor { get; set; }

			[JsonProperty("rarity")]
			public long Rarity { get; set; }

			[JsonProperty("recipe", NullValueHandling = NullValueHandling.Ignore)]
			public Recipe Recipe { get; set; }

			[JsonProperty("item_sources")]
			public List<ItemSource> ItemSources { get; set; }

			[JsonProperty("bonuses", NullValueHandling = NullValueHandling.Ignore)]
			public Dictionary<string, long> Bonuses { get; set; }

			[JsonProperty("short_name", NullValueHandling = NullValueHandling.Ignore)]
			public string ShortName { get; set; }
		}

		public partial class IconClass
		{
			[JsonProperty("file")]
			public string File { get; set; }
		}

		public partial class ItemSource
		{
			[JsonProperty("challenge_id", NullValueHandling = NullValueHandling.Ignore)]
			public long? ChallengeId { get; set; }

			[JsonProperty("challenge_skill", NullValueHandling = NullValueHandling.Ignore)]
			public SkillElement? ChallengeSkill { get; set; }

			[JsonProperty("challenge_difficulty", NullValueHandling = NullValueHandling.Ignore)]
			public long? ChallengeDifficulty { get; set; }

			[JsonProperty("type")]
			public long Type { get; set; }

			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("energy_quotient")]
			public double EnergyQuotient { get; set; }

			[JsonProperty("chance_grade")]
			public long ChanceGrade { get; set; }

			[JsonProperty("place", NullValueHandling = NullValueHandling.Ignore)]
			public string Place { get; set; }

			[JsonProperty("mission", NullValueHandling = NullValueHandling.Ignore)]
			public long? Mission { get; set; }

			[JsonProperty("dispute", NullValueHandling = NullValueHandling.Ignore)]
			public long? Dispute { get; set; }

			[JsonProperty("mastery", NullValueHandling = NullValueHandling.Ignore)]
			public long? Mastery { get; set; }
		}

		public partial class Recipe
		{
			[JsonProperty("demands")]
			public List<Demand> Demands { get; set; }

			[JsonProperty("validity_hash")]
			public string ValidityHash { get; set; }
		}

		public partial class Demand
		{
			[JsonProperty("archetype_id")]
			public long ArchetypeId { get; set; }

			[JsonProperty("count")]
			public long Count { get; set; }
		}

		public partial class Player
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("dbid")]
			public long Dbid { get; set; }

			[JsonProperty("lang")]
			public string Lang { get; set; }

			[JsonProperty("timezone")]
			public string Timezone { get; set; }

			[JsonProperty("locale")]
			public string Locale { get; set; }

			[JsonProperty("display_name")]
			public string DisplayName { get; set; }

			[JsonProperty("money")]
			public long Money { get; set; }

			[JsonProperty("premium_purchasable")]
			public long PremiumPurchasable { get; set; }

			[JsonProperty("premium_earnable")]
			public long PremiumEarnable { get; set; }

			[JsonProperty("honor")]
			public long Honor { get; set; }

			[JsonProperty("shuttle_rental_tokens")]
			public long ShuttleRentalTokens { get; set; }

			[JsonProperty("vip_points")]
			public long VipPoints { get; set; }

			[JsonProperty("vip_level")]
			public long VipLevel { get; set; }

			[JsonProperty("currency_exchanges")]
			public List<CurrencyExchange> CurrencyExchanges { get; set; }

			[JsonProperty("replicator_uses_today")]
			public long ReplicatorUsesToday { get; set; }

			[JsonProperty("replicator_limit")]
			public long ReplicatorLimit { get; set; }

			[JsonProperty("character")]
			public Character Character { get; set; }

			[JsonProperty("fleet")]
			public Fleet Fleet { get; set; }

			[JsonProperty("squad")]
			public Squad Squad { get; set; }

			[JsonProperty("mailbox")]
			public Mailbox Mailbox { get; set; }

			[JsonProperty("fleet_invite")]
			public FleetInvite FleetInvite { get; set; }

			[JsonProperty("entitlements")]
			public Entitlements Entitlements { get; set; }

			[JsonProperty("chats")]
			public Chats Chats { get; set; }

			[JsonProperty("commerce")]
			public Chats Commerce { get; set; }

			[JsonProperty("environment")]
			public Environment Environment { get; set; }

			[JsonProperty("motd")]
			public Motd Motd { get; set; }

			[JsonProperty("npe_complete")]
			public bool NpeComplete { get; set; }

			[JsonProperty("community_links")]
			public List<CommunityLink> CommunityLinks { get; set; }
		}

		public partial class Character
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("display_name")]
			public string DisplayName { get; set; }

			[JsonProperty("using_default_name")]
			public bool UsingDefaultName { get; set; }

			[JsonProperty("level")]
			public long Level { get; set; }

			[JsonProperty("max_level")]
			public long MaxLevel { get; set; }

			[JsonProperty("xp")]
			public long Xp { get; set; }

			[JsonProperty("xp_for_current_level")]
			public long XpForCurrentLevel { get; set; }

			[JsonProperty("xp_for_next_level")]
			public long XpForNextLevel { get; set; }

			[JsonProperty("location")]
			public Ation Location { get; set; }

			[JsonProperty("destination")]
			public Ation Destination { get; set; }

			[JsonProperty("navmap")]
			public Navmap Navmap { get; set; }

			[JsonProperty("accepted_missions")]
			public List<AcceptedMission> AcceptedMissions { get; set; }

			[JsonProperty("active_conflict")]
			public object ActiveConflict { get; set; }

			[JsonProperty("shuttle_bays")]
			public long ShuttleBays { get; set; }

			[JsonProperty("next_shuttle_bay_cost")]
			public object NextShuttleBayCost { get; set; }

			[JsonProperty("can_purchase_shuttle_bay")]
			public bool CanPurchaseShuttleBay { get; set; }

			[JsonProperty("crew_avatar")]
			public CrewAvatar CrewAvatar { get; set; }

			[JsonProperty("stored_immortals")]
			public List<StoredImmortal> StoredImmortals { get; set; }

			[JsonProperty("seconds_to_scan_cooldown")]
			public long SecondsToScanCooldown { get; set; }

			[JsonProperty("scan_speedups_today")]
			public long ScanSpeedupsToday { get; set; }

			[JsonProperty("replay_energy_max")]
			public long ReplayEnergyMax { get; set; }

			[JsonProperty("replay_energy_rate")]
			public long ReplayEnergyRate { get; set; }

			[JsonProperty("seconds_from_replay_energy_basis")]
			public long SecondsFromReplayEnergyBasis { get; set; }

			[JsonProperty("replay_energy_overflow")]
			public long ReplayEnergyOverflow { get; set; }

			[JsonProperty("boost_windows")]
			public List<BoostWindow> BoostWindows { get; set; }

			[JsonProperty("seconds_from_last_boost_claim")]
			public double SecondsFromLastBoostClaim { get; set; }

			[JsonProperty("video_ad_chroniton_boost_reward")]
			public VideoAdChronitonBoostRewardClass VideoAdChronitonBoostReward { get; set; }

			[JsonProperty("cadet_tickets")]
			public Tickets CadetTickets { get; set; }

			[JsonProperty("pvp_tickets")]
			public Tickets PvpTickets { get; set; }

			[JsonProperty("event_tickets")]
			public Tickets EventTickets { get; set; }

			[JsonProperty("cadet_schedule")]
			public CadetSchedule CadetSchedule { get; set; }

			[JsonProperty("pvp_divisions")]
			public List<PvpDivision> PvpDivisions { get; set; }

			[JsonProperty("pvp_timer")]
			public PvpTimer PvpTimer { get; set; }

			[JsonProperty("crew")]
			public List<Crew> Crew { get; set; }

			[JsonProperty("items")]
			public List<Item> Items { get; set; }

			[JsonProperty("crew_borrows")]
			public List<object> CrewBorrows { get; set; }

			[JsonProperty("crew_shares")]
			public List<object> CrewShares { get; set; }

			[JsonProperty("crew_limit")]
			public long CrewLimit { get; set; }

			[JsonProperty("crew_limit_increase_per_purchase")]
			public long CrewLimitIncreasePerPurchase { get; set; }

			[JsonProperty("next_crew_limit_increase_cost")]
			public NextCrewLimitIncreaseCost NextCrewLimitIncreaseCost { get; set; }

			[JsonProperty("can_purchase_crew_limit_increase")]
			public bool CanPurchaseCrewLimitIncrease { get; set; }

			[JsonProperty("item_limit")]
			public long ItemLimit { get; set; }

			[JsonProperty("ships")]
			public List<ShipElement> Ships { get; set; }

			[JsonProperty("current_ship_id")]
			public long CurrentShipId { get; set; }

			[JsonProperty("shuttle_adventures")]
			public List<ShuttleAdventure> ShuttleAdventures { get; set; }

			[JsonProperty("factions")]
			public List<Faction> Factions { get; set; }

			[JsonProperty("disputes")]
			public List<object> Disputes { get; set; }

			[JsonProperty("tng_the_game_level")]
			public long TngTheGameLevel { get; set; }

			[JsonProperty("open_packs")]
			public List<object> OpenPacks { get; set; }

			[JsonProperty("daily_activities")]
			public List<DailyActivity> DailyActivities { get; set; }

			[JsonProperty("next_daily_activity_reset")]
			public double NextDailyActivityReset { get; set; }

			[JsonProperty("next_starbase_donation_reset")]
			public double NextStarbaseDonationReset { get; set; }

			[JsonProperty("fleet_activities")]
			public List<FleetActivity> FleetActivities { get; set; }

			[JsonProperty("next_fleet_activity_reset")]
			public double NextFleetActivityReset { get; set; }

			[JsonProperty("freestanding_quests")]
			public List<object> FreestandingQuests { get; set; }

			[JsonProperty("daily_rewards_state")]
			public DailyRewardsState DailyRewardsState { get; set; }

			[JsonProperty("dispute_histories")]
			public List<DisputeHistory> DisputeHistories { get; set; }

			[JsonProperty("stimpack")]
			public object Stimpack { get; set; }

			[JsonProperty("tutorials")]
			public List<Tutorial> Tutorials { get; set; }

			[JsonProperty("location_channel_prefix")]
			public string LocationChannelPrefix { get; set; }

			[JsonProperty("honor_reward_by_rarity")]
			public List<long> HonorRewardByRarity { get; set; }

			[JsonProperty("voyage_descriptions")]
			public List<VoyageDescription> VoyageDescriptions { get; set; }

			[JsonProperty("voyage")]
			public List<object> Voyage { get; set; }

			[JsonProperty("voyage_summaries")]
			public VoyageSummaries VoyageSummaries { get; set; }

			[JsonProperty("cryo_collections")]
			public List<CryoCollection> CryoCollections { get; set; }

			[JsonProperty("reroll_descriptions")]
			public List<RerollDescription> RerollDescriptions { get; set; }

			[JsonProperty("crew_collection_buffs")]
			public List<Buff> CrewCollectionBuffs { get; set; }

			[JsonProperty("starbase_buffs")]
			public List<Buff> StarbaseBuffs { get; set; }
		}

		public partial class AcceptedMission
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("description")]
			public string Description { get; set; }

			[JsonProperty("episode")]
			public long Episode { get; set; }

			[JsonProperty("episode_title")]
			public string EpisodeTitle { get; set; }

			[JsonProperty("episode_portrait")]
			public IconClass EpisodePortrait { get; set; }

			[JsonProperty("marker")]
			public List<long> Marker { get; set; }

			[JsonProperty("marker_icon")]
			public IconClass MarkerIcon { get; set; }

			[JsonProperty("exclude_from_timeline")]
			public bool? ExcludeFromTimeline { get; set; }

			[JsonProperty("stars_earned")]
			public long StarsEarned { get; set; }

			[JsonProperty("total_stars")]
			public long TotalStars { get; set; }

			[JsonProperty("accepted")]
			public bool Accepted { get; set; }

			[JsonProperty("state")]
			public long State { get; set; }

			[JsonProperty("main_story")]
			public bool MainStory { get; set; }
		}

		public partial class BoostWindow
		{
			[JsonProperty("window")]
			public List<long> Window { get; set; }

			[JsonProperty("reward")]
			public VideoAdChronitonBoostRewardClass Reward { get; set; }
		}

		public partial class VideoAdChronitonBoostRewardClass
		{
			[JsonProperty("type")]
			public long Type { get; set; }

			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public VideoAdChronitonBoostRewardSymbol Symbol { get; set; }

			[JsonProperty("name")]
			public FullNameEnum Name { get; set; }

			[JsonProperty("full_name")]
			public FullNameEnum FullName { get; set; }

			[JsonProperty("flavor")]
			public string Flavor { get; set; }

			[JsonProperty("icon")]
			public Icon Icon { get; set; }

			[JsonProperty("quantity")]
			public long Quantity { get; set; }

			[JsonProperty("rarity")]
			public long Rarity { get; set; }
		}

		public partial class Icon
		{
			[JsonProperty("file")]
			public string File { get; set; }

			[JsonProperty("atlas_info", NullValueHandling = NullValueHandling.Ignore)]
			public AtlasInfo? AtlasInfo { get; set; }
		}

		public partial class CadetSchedule
		{
			[JsonProperty("day")]
			public long Day { get; set; }

			[JsonProperty("schedule")]
			public List<Schedule> Schedule { get; set; }

			[JsonProperty("missions")]
			public List<Mission> Missions { get; set; }

			[JsonProperty("current")]
			public long Current { get; set; }

			[JsonProperty("ends_in")]
			public double EndsIn { get; set; }

			[JsonProperty("next")]
			public long Next { get; set; }

			[JsonProperty("next_starts_in")]
			public double NextStartsIn { get; set; }
		}

		public partial class Mission
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("title")]
			public string Title { get; set; }

			[JsonProperty("speaker")]
			public string Speaker { get; set; }

			[JsonProperty("description")]
			public string Description { get; set; }

			[JsonProperty("portrait")]
			public IconClass Portrait { get; set; }

			[JsonProperty("image")]
			public IconClass Image { get; set; }

			[JsonProperty("image_small")]
			public IconClass ImageSmall { get; set; }

			[JsonProperty("requirement")]
			public string Requirement { get; set; }
		}

		public partial class Schedule
		{
			[JsonProperty("day")]
			public long Day { get; set; }

			[JsonProperty("mission")]
			public long Mission { get; set; }
		}

		public partial class Tickets
		{
			[JsonProperty("current")]
			public long Current { get; set; }

			[JsonProperty("max")]
			public long Max { get; set; }

			[JsonProperty("spend_in")]
			public double SpendIn { get; set; }

			[JsonProperty("reset_in")]
			public double ResetIn { get; set; }
		}

		public partial class Crew
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("short_name")]
			public string ShortName { get; set; }

			[JsonProperty("flavor")]
			public string Flavor { get; set; }

			[JsonProperty("archetype_id")]
			public long ArchetypeId { get; set; }

			[JsonProperty("xp")]
			public long Xp { get; set; }

			[JsonProperty("xp_for_current_level")]
			public long XpForCurrentLevel { get; set; }

			[JsonProperty("xp_for_next_level")]
			public long XpForNextLevel { get; set; }

			[JsonProperty("max_xp")]
			public long MaxXp { get; set; }

			[JsonProperty("favorite")]
			public bool Favorite { get; set; }

			[JsonProperty("level")]
			public long Level { get; set; }

			[JsonProperty("in_buy_back_state")]
			public bool InBuyBackState { get; set; }

			[JsonProperty("max_level")]
			public long MaxLevel { get; set; }

			[JsonProperty("rarity")]
			public long Rarity { get; set; }

			[JsonProperty("max_rarity")]
			public long MaxRarity { get; set; }

			[JsonProperty("equipment_rank")]
			public long EquipmentRank { get; set; }

			[JsonProperty("max_equipment_rank")]
			public long MaxEquipmentRank { get; set; }

			[JsonProperty("equipment_slots")]
			public List<EquipmentSlot> EquipmentSlots { get; set; }

			[JsonProperty("equipment")]
			public List<List<long>> Equipment { get; set; }

			[JsonProperty("icon")]
			public IconClass Icon { get; set; }

			[JsonProperty("portrait")]
			public IconClass Portrait { get; set; }

			[JsonProperty("full_body")]
			public IconClass FullBody { get; set; }

			[JsonProperty("voice_over")]
			public string VoiceOver { get; set; }

			[JsonProperty("expires_in")]
			public double? ExpiresIn { get; set; }

			[JsonProperty("active_status")]
			public long ActiveStatus { get; set; }

			[JsonProperty("active_id")]
			public long? ActiveId { get; set; }

			[JsonProperty("active_index")]
			public long ActiveIndex { get; set; }

			[JsonProperty("passive_status")]
			public long PassiveStatus { get; set; }

			[JsonProperty("passive_id")]
			public long? PassiveId { get; set; }

			[JsonProperty("passive_index")]
			public long PassiveIndex { get; set; }

			[JsonProperty("traits")]
			public List<string> Traits { get; set; }

			[JsonProperty("traits_hidden")]
			public List<string> TraitsHidden { get; set; }

			[JsonProperty("skills")]
			public BaseSkillsClass Skills { get; set; }

			[JsonProperty("base_skills")]
			public BaseSkillsClass BaseSkills { get; set; }

			[JsonProperty("ship_battle")]
			public ShipBattle ShipBattle { get; set; }

			[JsonProperty("action")]
			public CrewAction Action { get; set; }

			[JsonProperty("default_avatar")]
			public bool DefaultAvatar { get; set; }

			[JsonProperty("cross_fuse_targets")]
			public List<string> CrossFuseTargets { get; set; }

			[JsonProperty("cap_achiever")]
			public CapAchiever CapAchiever { get; set; }
		}

		public partial class CrewAction
		{
			[JsonProperty("bonus_amount")]
			public long BonusAmount { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("cooldown")]
			public long Cooldown { get; set; }

			[JsonProperty("initial_cooldown")]
			public long InitialCooldown { get; set; }

			[JsonProperty("duration")]
			public long Duration { get; set; }

			[JsonProperty("bonus_type")]
			public long BonusType { get; set; }

			[JsonProperty("crew")]
			public long Crew { get; set; }

			[JsonProperty("icon")]
			public IconClass Icon { get; set; }

			[JsonProperty("ability", NullValueHandling = NullValueHandling.Ignore)]
			public Ability Ability { get; set; }

			[JsonProperty("penalty", NullValueHandling = NullValueHandling.Ignore)]
			public Penalty Penalty { get; set; }

			[JsonProperty("special")]
			public bool Special { get; set; }

			[JsonProperty("limit", NullValueHandling = NullValueHandling.Ignore)]
			public long? Limit { get; set; }

			[JsonProperty("charge_phases", NullValueHandling = NullValueHandling.Ignore)]
			public List<ChargePhase> ChargePhases { get; set; }
		}

		public partial class Ability
		{
			[JsonProperty("condition")]
			public long Condition { get; set; }

			[JsonProperty("type")]
			public long Type { get; set; }

			[JsonProperty("amount")]
			public long Amount { get; set; }
		}

		public partial class ChargePhase
		{
			[JsonProperty("charge_time")]
			public long ChargeTime { get; set; }

			[JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
			public long? Duration { get; set; }

			[JsonProperty("cooldown", NullValueHandling = NullValueHandling.Ignore)]
			public long? Cooldown { get; set; }

			[JsonProperty("bonus_amount", NullValueHandling = NullValueHandling.Ignore)]
			public long? BonusAmount { get; set; }

			[JsonProperty("ability_amount", NullValueHandling = NullValueHandling.Ignore)]
			public long? AbilityAmount { get; set; }
		}

		public partial class Penalty
		{
			[JsonProperty("type")]
			public long Type { get; set; }

			[JsonProperty("amount")]
			public long Amount { get; set; }
		}

		public partial class BaseSkillsClass
		{
			[JsonProperty("security_skill", NullValueHandling = NullValueHandling.Ignore)]
			public Skill SecuritySkill { get; set; }

			[JsonProperty("medicine_skill", NullValueHandling = NullValueHandling.Ignore)]
			public Skill MedicineSkill { get; set; }

			[JsonProperty("engineering_skill", NullValueHandling = NullValueHandling.Ignore)]
			public Skill EngineeringSkill { get; set; }

			[JsonProperty("command_skill", NullValueHandling = NullValueHandling.Ignore)]
			public Skill CommandSkill { get; set; }

			[JsonProperty("diplomacy_skill", NullValueHandling = NullValueHandling.Ignore)]
			public Skill DiplomacySkill { get; set; }

			[JsonProperty("science_skill", NullValueHandling = NullValueHandling.Ignore)]
			public Skill ScienceSkill { get; set; }
		}

		public partial class Skill
		{
			[JsonProperty("core")]
			public long Core { get; set; }

			[JsonProperty("range_min")]
			public long RangeMin { get; set; }

			[JsonProperty("range_max")]
			public long RangeMax { get; set; }
		}

		public partial class CapAchiever
		{
			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("date")]
			public long Date { get; set; }
		}

		public partial class EquipmentSlot
		{
			[JsonProperty("level")]
			public long Level { get; set; }

			[JsonProperty("archetype")]
			public long Archetype { get; set; }
		}

		public partial class ShipBattle
		{
			[JsonProperty("accuracy", NullValueHandling = NullValueHandling.Ignore)]
			public long? Accuracy { get; set; }

			[JsonProperty("evasion", NullValueHandling = NullValueHandling.Ignore)]
			public long? Evasion { get; set; }

			[JsonProperty("crit_chance", NullValueHandling = NullValueHandling.Ignore)]
			public long? CritChance { get; set; }

			[JsonProperty("crit_bonus", NullValueHandling = NullValueHandling.Ignore)]
			public long? CritBonus { get; set; }
		}

		public partial class CrewAvatar
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("traits")]
			public List<string> Traits { get; set; }

			[JsonProperty("traits_hidden")]
			public List<string> TraitsHidden { get; set; }

			[JsonProperty("short_name")]
			public string ShortName { get; set; }

			[JsonProperty("max_rarity")]
			public long MaxRarity { get; set; }

			[JsonProperty("icon")]
			public IconClass Icon { get; set; }

			[JsonProperty("portrait")]
			public IconClass Portrait { get; set; }

			[JsonProperty("full_body")]
			public IconClass FullBody { get; set; }

			[JsonProperty("default_avatar")]
			public bool DefaultAvatar { get; set; }

			[JsonProperty("hide_from_cryo")]
			public bool HideFromCryo { get; set; }

			[JsonProperty("skills")]
			public List<SkillElement> Skills { get; set; }
		}

		public partial class Buff
		{
			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("short_name")]
			public string ShortName { get; set; }

			[JsonProperty("flavor")]
			public string Flavor { get; set; }

			[JsonProperty("icon")]
			public IconClass Icon { get; set; }

			[JsonProperty("operator")]
			public Operator Operator { get; set; }

			[JsonProperty("value")]
			public double Value { get; set; }

			[JsonProperty("stat")]
			public string Stat { get; set; }

			[JsonProperty("source")]
			public Source Source { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }
		}

		public partial class CryoCollection
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("type_id")]
			public long TypeId { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("image")]
			public string Image { get; set; }

			[JsonProperty("description")]
			public string Description { get; set; }

			[JsonProperty("progress")]
			public long Progress { get; set; }

			[JsonProperty("traits")]
			public List<string> Traits { get; set; }

			[JsonProperty("extra_crew")]
			public List<long> ExtraCrew { get; set; }

			[JsonProperty("claimable_milestone_index")]
			public long ClaimableMilestoneIndex { get; set; }

			[JsonProperty("milestone")]
			public CryoCollectionMilestone Milestone { get; set; }
		}

		public partial class CryoCollectionMilestone
		{
			[JsonProperty("rewards")]
			public List<MilestoneReward> Rewards { get; set; }

			[JsonProperty("goal")]
			public long Goal { get; set; }

			[JsonProperty("buffs")]
			public List<ShuttleTokenPreviewItem> Buffs { get; set; }
		}

		public partial class ShuttleTokenPreviewItem
		{
			[JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
			public long? Id { get; set; }

			[JsonProperty("symbol", NullValueHandling = NullValueHandling.Ignore)]
			public string Symbol { get; set; }

			[JsonProperty("type")]
			public long Type { get; set; }

			[JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
			public string Name { get; set; }

			[JsonProperty("icon")]
			public IconClass Icon { get; set; }

			[JsonProperty("flavor", NullValueHandling = NullValueHandling.Ignore)]
			public string Flavor { get; set; }

			[JsonProperty("rarity", NullValueHandling = NullValueHandling.Ignore)]
			public long? Rarity { get; set; }

			[JsonProperty("item_sources", NullValueHandling = NullValueHandling.Ignore)]
			public List<object> ItemSources { get; set; }

			[JsonProperty("full_name", NullValueHandling = NullValueHandling.Ignore)]
			public string FullName { get; set; }

			[JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
			public long? Quantity { get; set; }

			[JsonProperty("potential_rewards", NullValueHandling = NullValueHandling.Ignore)]
			public List<ShuttleTokenPreviewItem> PotentialRewards { get; set; }

			[JsonProperty("item_type", NullValueHandling = NullValueHandling.Ignore)]
			public long? ItemType { get; set; }

			[JsonProperty("bonuses", NullValueHandling = NullValueHandling.Ignore)]
			public Dictionary<string, long> Bonuses { get; set; }

			[JsonProperty("faction_id", NullValueHandling = NullValueHandling.Ignore)]
			public long? FactionId { get; set; }
		}

		public partial class MilestoneReward
		{
			[JsonProperty("type")]
			public long Type { get; set; }

			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public VideoAdChronitonBoostRewardSymbol Symbol { get; set; }

			[JsonProperty("name")]
			public PurpleName Name { get; set; }

			[JsonProperty("full_name")]
			public FullNameEnum FullName { get; set; }

			[JsonProperty("flavor")]
			public string Flavor { get; set; }

			[JsonProperty("icon")]
			public Icon Icon { get; set; }

			[JsonProperty("quantity")]
			public long Quantity { get; set; }

			[JsonProperty("rarity")]
			public long Rarity { get; set; }

			[JsonProperty("item_type", NullValueHandling = NullValueHandling.Ignore)]
			public long? ItemType { get; set; }
		}

		public partial class DailyActivity
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("description")]
			public string Description { get; set; }

			[JsonProperty("icon")]
			public Icon Icon { get; set; }

			[JsonProperty("area")]
			public string Area { get; set; }

			[JsonProperty("weight")]
			public long Weight { get; set; }

			[JsonProperty("category")]
			public long Category { get; set; }

			[JsonProperty("lifetime", NullValueHandling = NullValueHandling.Ignore)]
			public long? Lifetime { get; set; }

			[JsonProperty("rewards", NullValueHandling = NullValueHandling.Ignore)]
			public List<ShuttleTokenPreviewItem> Rewards { get; set; }

			[JsonProperty("goal", NullValueHandling = NullValueHandling.Ignore)]
			public long? Goal { get; set; }

			[JsonProperty("min_level", NullValueHandling = NullValueHandling.Ignore)]
			public long? MinLevel { get; set; }

			[JsonProperty("rarity", NullValueHandling = NullValueHandling.Ignore)]
			public long? Rarity { get; set; }

			[JsonProperty("progress", NullValueHandling = NullValueHandling.Ignore)]
			public long? Progress { get; set; }

			[JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
			public string Status { get; set; }
		}

		public partial class DailyRewardsState
		{
			[JsonProperty("seconds_until_next_reward")]
			public long SecondsUntilNextReward { get; set; }

			[JsonProperty("today_reward_day_index")]
			public long TodayRewardDayIndex { get; set; }

			[JsonProperty("season_points_per_day")]
			public long SeasonPointsPerDay { get; set; }

			[JsonProperty("reward_days")]
			public List<RewardDay> RewardDays { get; set; }
		}

		public partial class RewardDay
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("rewards")]
			public List<RewardDayReward> Rewards { get; set; }

			[JsonProperty("double_at_vip", NullValueHandling = NullValueHandling.Ignore)]
			public long? DoubleAtVip { get; set; }
		}

		public partial class RewardDayReward
		{
			[JsonProperty("type")]
			public long Type { get; set; }

			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("rarity")]
			public long Rarity { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("full_name")]
			public string FullName { get; set; }

			[JsonProperty("flavor", NullValueHandling = NullValueHandling.Ignore)]
			public string Flavor { get; set; }

			[JsonProperty("icon")]
			public Icon Icon { get; set; }

			[JsonProperty("quantity")]
			public long Quantity { get; set; }

			[JsonProperty("portrait", NullValueHandling = NullValueHandling.Ignore)]
			public IconClass Portrait { get; set; }

			[JsonProperty("full_body", NullValueHandling = NullValueHandling.Ignore)]
			public IconClass FullBody { get; set; }

			[JsonProperty("skills", NullValueHandling = NullValueHandling.Ignore)]
			public RewardSkills Skills { get; set; }

			[JsonProperty("traits", NullValueHandling = NullValueHandling.Ignore)]
			public List<string> Traits { get; set; }

			[JsonProperty("action", NullValueHandling = NullValueHandling.Ignore)]
			public CrewAction Action { get; set; }

			[JsonProperty("ship", NullValueHandling = NullValueHandling.Ignore)]
			public RewardShip Ship { get; set; }

			[JsonProperty("item_type", NullValueHandling = NullValueHandling.Ignore)]
			public long? ItemType { get; set; }
		}

		public partial class RewardShip
		{
			[JsonProperty("type")]
			public long Type { get; set; }

			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("full_name")]
			public string FullName { get; set; }

			[JsonProperty("flavor")]
			public string Flavor { get; set; }

			[JsonProperty("icon")]
			public IconClass Icon { get; set; }

			[JsonProperty("shields")]
			public long Shields { get; set; }

			[JsonProperty("hull")]
			public long Hull { get; set; }

			[JsonProperty("attack")]
			public long Attack { get; set; }

			[JsonProperty("evasion")]
			public long Evasion { get; set; }

			[JsonProperty("accuracy")]
			public long Accuracy { get; set; }

			[JsonProperty("quantity")]
			public long Quantity { get; set; }

			[JsonProperty("rarity")]
			public long Rarity { get; set; }
		}

		public partial class RewardSkills
		{
			[JsonProperty("diplomacy_skill")]
			public Skill DiplomacySkill { get; set; }

			[JsonProperty("command_skill", NullValueHandling = NullValueHandling.Ignore)]
			public Skill CommandSkill { get; set; }

			[JsonProperty("security_skill", NullValueHandling = NullValueHandling.Ignore)]
			public Skill SecuritySkill { get; set; }
		}

		public partial class Ation
		{
			[JsonProperty("system")]
			public string System { get; set; }

			[JsonProperty("place")]
			public string Place { get; set; }

			[JsonProperty("setup")]
			public string Setup { get; set; }

			[JsonProperty("x")]
			public long X { get; set; }

			[JsonProperty("y")]
			public long Y { get; set; }
		}

		public partial class DisputeHistory
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("episode")]
			public long Episode { get; set; }

			[JsonProperty("marker")]
			public List<long> Marker { get; set; }

			[JsonProperty("completed")]
			public bool Completed { get; set; }

			[JsonProperty("mission_ids")]
			public List<long> MissionIds { get; set; }

			[JsonProperty("stars_earned")]
			public long StarsEarned { get; set; }

			[JsonProperty("total_stars")]
			public long TotalStars { get; set; }

			[JsonProperty("exclude_from_timeline")]
			public bool ExcludeFromTimeline { get; set; }

			[JsonProperty("faction_id")]
			public long FactionId { get; set; }
		}

		public partial class Faction
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("reputation")]
			public long Reputation { get; set; }

			[JsonProperty("discovered")]
			public long Discovered { get; set; }

			[JsonProperty("completed_shuttle_adventures")]
			public long CompletedShuttleAdventures { get; set; }

			[JsonProperty("icon")]
			public IconClass Icon { get; set; }

			[JsonProperty("representative_icon")]
			public IconClass RepresentativeIcon { get; set; }

			[JsonProperty("representative_full_body")]
			public IconClass RepresentativeFullBody { get; set; }

			[JsonProperty("reputation_icon")]
			public IconClass ReputationIcon { get; set; }

			[JsonProperty("reputation_item_icon")]
			public IconClass ReputationItemIcon { get; set; }

			[JsonProperty("home_system")]
			public string HomeSystem { get; set; }

			[JsonProperty("shop_layout")]
			public string ShopLayout { get; set; }

			[JsonProperty("shuttle_token_id")]
			public long ShuttleTokenId { get; set; }

			[JsonProperty("shuttle_token_preview_item")]
			public ShuttleTokenPreviewItem ShuttleTokenPreviewItem { get; set; }

			[JsonProperty("event_winner_rewards")]
			public List<object> EventWinnerRewards { get; set; }

			[JsonProperty("shuttle_mission_rewards")]
			public List<ShuttleMissionReward> ShuttleMissionRewards { get; set; }
		}

		public partial class ShuttleMissionReward
		{
			[JsonProperty("type")]
			public long Type { get; set; }

			[JsonProperty("icon")]
			public IconClass Icon { get; set; }

			[JsonProperty("rarity", NullValueHandling = NullValueHandling.Ignore)]
			public long? Rarity { get; set; }

			[JsonProperty("potential_rewards", NullValueHandling = NullValueHandling.Ignore)]
			public List<ShuttleTokenPreviewItem> PotentialRewards { get; set; }

			[JsonProperty("quantity")]
			public long Quantity { get; set; }

			[JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
			public long? Id { get; set; }

			[JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
			public string Name { get; set; }
		}

		public partial class FleetActivity
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("description")]
			public string Description { get; set; }

			[JsonProperty("icon")]
			public Icon Icon { get; set; }

			[JsonProperty("area")]
			public string Area { get; set; }

			[JsonProperty("category")]
			public string Category { get; set; }

			[JsonProperty("total_points")]
			public long TotalPoints { get; set; }

			[JsonProperty("current_points")]
			public long CurrentPoints { get; set; }

			[JsonProperty("milestones")]
			public List<MilestoneElement> Milestones { get; set; }

			[JsonProperty("claims_available_count")]
			public long ClaimsAvailableCount { get; set; }
		}

		public partial class MilestoneElement
		{
			[JsonProperty("goal")]
			public long Goal { get; set; }

			[JsonProperty("rewards")]
			public List<MilestoneReward> Rewards { get; set; }

			[JsonProperty("claimed")]
			public bool Claimed { get; set; }

			[JsonProperty("claimable")]
			public bool Claimable { get; set; }
		}

		public partial class Item
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("type")]
			public long Type { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("flavor")]
			public string Flavor { get; set; }

			[JsonProperty("archetype_id")]
			public long ArchetypeId { get; set; }

			[JsonProperty("quantity")]
			public long Quantity { get; set; }

			[JsonProperty("icon")]
			public IconClass Icon { get; set; }

			[JsonProperty("rarity")]
			public long Rarity { get; set; }

			[JsonProperty("expires_in")]
			public object ExpiresIn { get; set; }

			[JsonProperty("short_name", NullValueHandling = NullValueHandling.Ignore)]
			public string ShortName { get; set; }

			[JsonProperty("bonuses", NullValueHandling = NullValueHandling.Ignore)]
			public Dictionary<string, long> Bonuses { get; set; }

			[JsonProperty("time_modifier", NullValueHandling = NullValueHandling.Ignore)]
			public long? TimeModifier { get; set; }

			[JsonProperty("cr_modifier", NullValueHandling = NullValueHandling.Ignore)]
			public long? CrModifier { get; set; }

			[JsonProperty("reward_modifier", NullValueHandling = NullValueHandling.Ignore)]
			public long? RewardModifier { get; set; }

			[JsonProperty("crafting_bonuses", NullValueHandling = NullValueHandling.Ignore)]
			public Dictionary<string, double> CraftingBonuses { get; set; }
		}

		public partial class Navmap
		{
			[JsonProperty("places")]
			public List<Place> Places { get; set; }

			[JsonProperty("systems")]
			public List<SystemElement> Systems { get; set; }
		}

		public partial class Place
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("system")]
			public string System { get; set; }

			[JsonProperty("client_asset")]
			public ClientAsset ClientAsset { get; set; }

			[JsonProperty("display_name", NullValueHandling = NullValueHandling.Ignore)]
			public string DisplayName { get; set; }

			[JsonProperty("visited", NullValueHandling = NullValueHandling.Ignore)]
			public bool? Visited { get; set; }
		}

		public partial class ClientAsset
		{
			[JsonProperty("system")]
			public string System { get; set; }

			[JsonProperty("place")]
			public string Place { get; set; }
		}

		public partial class SystemElement
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("x")]
			public long X { get; set; }

			[JsonProperty("y")]
			public long Y { get; set; }

			[JsonProperty("default_place")]
			public string DefaultPlace { get; set; }

			[JsonProperty("display_name", NullValueHandling = NullValueHandling.Ignore)]
			public string DisplayName { get; set; }

			[JsonProperty("star", NullValueHandling = NullValueHandling.Ignore)]
			public long? Star { get; set; }

			[JsonProperty("decorator", NullValueHandling = NullValueHandling.Ignore)]
			public long? Decorator { get; set; }

			[JsonProperty("faction", NullValueHandling = NullValueHandling.Ignore)]
			public string Faction { get; set; }

			[JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
			public long? Scale { get; set; }

			[JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
			public bool? Active { get; set; }
		}

		public partial class NextCrewLimitIncreaseCost
		{
			[JsonProperty("currency")]
			public long Currency { get; set; }

			[JsonProperty("amount")]
			public long Amount { get; set; }
		}

		public partial class PvpDivision
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("tier")]
			public long Tier { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("description")]
			public string Description { get; set; }

			[JsonProperty("min_ship_rarity")]
			public long MinShipRarity { get; set; }

			[JsonProperty("max_ship_rarity")]
			public long MaxShipRarity { get; set; }

			[JsonProperty("max_crew_rarity")]
			public long MaxCrewRarity { get; set; }

			[JsonProperty("setup")]
			public Setup Setup { get; set; }
		}

		public partial class Setup
		{
			[JsonProperty("ship_id")]
			public long ShipId { get; set; }

			[JsonProperty("slots")]
			public List<long> Slots { get; set; }
		}

		public partial class PvpTimer
		{
			[JsonProperty("supports_rewarding")]
			public bool SupportsRewarding { get; set; }

			[JsonProperty("pvp_allowed")]
			public bool PvpAllowed { get; set; }

			[JsonProperty("changes_in")]
			public double ChangesIn { get; set; }
		}

		public partial class RerollDescription
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("jackpot")]
			public long Jackpot { get; set; }

			[JsonProperty("crew_required")]
			public long CrewRequired { get; set; }
		}

		public partial class ShipElement
		{
			[JsonProperty("archetype_id")]
			public long ArchetypeId { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("rarity")]
			public long Rarity { get; set; }

			[JsonProperty("icon")]
			public IconClass Icon { get; set; }

			[JsonProperty("flavor")]
			public string Flavor { get; set; }

			[JsonProperty("max_level")]
			public long MaxLevel { get; set; }

			[JsonProperty("actions")]
			public List<ActionElement> Actions { get; set; }

			[JsonProperty("shields")]
			public long Shields { get; set; }

			[JsonProperty("hull")]
			public long Hull { get; set; }

			[JsonProperty("attack")]
			public long Attack { get; set; }

			[JsonProperty("evasion")]
			public long Evasion { get; set; }

			[JsonProperty("accuracy")]
			public long Accuracy { get; set; }

			[JsonProperty("crit_chance")]
			public long CritChance { get; set; }

			[JsonProperty("crit_bonus")]
			public long CritBonus { get; set; }

			[JsonProperty("attacks_per_second")]
			public double AttacksPerSecond { get; set; }

			[JsonProperty("shield_regen")]
			public long ShieldRegen { get; set; }

			[JsonProperty("traits")]
			public List<string> Traits { get; set; }

			[JsonProperty("traits_hidden")]
			public List<object> TraitsHidden { get; set; }

			[JsonProperty("antimatter")]
			public long Antimatter { get; set; }

			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("level")]
			public long Level { get; set; }

			[JsonProperty("model")]
			public string Model { get; set; }

			[JsonProperty("schematic_gain_cost_next_level")]
			public long SchematicGainCostNextLevel { get; set; }

			[JsonProperty("schematic_id")]
			public long SchematicId { get; set; }

			[JsonProperty("schematic_icon")]
			public IconClass SchematicIcon { get; set; }

			[JsonProperty("battle_stations")]
			public List<BattleStation> BattleStations { get; set; }
		}

		public partial class ActionElement
		{
			[JsonProperty("bonus_amount")]
			public long BonusAmount { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("cooldown")]
			public long Cooldown { get; set; }

			[JsonProperty("initial_cooldown")]
			public long InitialCooldown { get; set; }

			[JsonProperty("duration")]
			public long Duration { get; set; }

			[JsonProperty("bonus_type")]
			public long BonusType { get; set; }

			[JsonProperty("crew")]
			public long? Crew { get; set; }

			[JsonProperty("icon")]
			public IconClass Icon { get; set; }

			[JsonProperty("special")]
			public bool Special { get; set; }

			[JsonProperty("ability", NullValueHandling = NullValueHandling.Ignore)]
			public Ability Ability { get; set; }

			[JsonProperty("penalty", NullValueHandling = NullValueHandling.Ignore)]
			public Penalty Penalty { get; set; }

			[JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
			public long? Status { get; set; }

			[JsonProperty("limit", NullValueHandling = NullValueHandling.Ignore)]
			public long? Limit { get; set; }

			[JsonProperty("charge_phases", NullValueHandling = NullValueHandling.Ignore)]
			public List<ChargePhase> ChargePhases { get; set; }
		}

		public partial class BattleStation
		{
			[JsonProperty("skill")]
			public SkillElement Skill { get; set; }
		}

		public partial class ShuttleAdventure
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("faction_id")]
			public long FactionId { get; set; }

			[JsonProperty("token_archetype_id")]
			public object TokenArchetypeId { get; set; }

			[JsonProperty("challenge_rating")]
			public long ChallengeRating { get; set; }

			[JsonProperty("shuttles")]
			public List<Shuttle> Shuttles { get; set; }

			[JsonProperty("completes_in_seconds")]
			public long CompletesInSeconds { get; set; }

			[JsonProperty("x")]
			public long X { get; set; }

			[JsonProperty("y")]
			public long Y { get; set; }
		}

		public partial class Shuttle
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("description")]
			public string Description { get; set; }

			[JsonProperty("state")]
			public long State { get; set; }

			[JsonProperty("expires_in")]
			public double ExpiresIn { get; set; }

			[JsonProperty("faction_id")]
			public long FactionId { get; set; }

			[JsonProperty("slots")]
			public List<Slot> Slots { get; set; }

			[JsonProperty("rewards")]
			public List<ShuttleTokenPreviewItem> Rewards { get; set; }

			[JsonProperty("is_rental")]
			public bool IsRental { get; set; }
		}

		public partial class Slot
		{
			[JsonProperty("level")]
			public object Level { get; set; }

			[JsonProperty("required_trait")]
			public object RequiredTrait { get; set; }

			[JsonProperty("skills")]
			public List<string> Skills { get; set; }

			[JsonProperty("trait_bonuses")]
			public Chats TraitBonuses { get; set; }
		}

		public partial class Chats
		{
		}

		public partial class StoredImmortal
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("quantity")]
			public long Quantity { get; set; }
		}

		public partial class Tutorial
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("state")]
			public TutorialState State { get; set; }
		}

		public partial class VoyageDescription
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("description")]
			public string Description { get; set; }

			[JsonProperty("icon")]
			public string Icon { get; set; }

			[JsonProperty("skills")]
			public VoyageDescriptionSkills Skills { get; set; }

			[JsonProperty("ship_trait")]
			public string ShipTrait { get; set; }

			[JsonProperty("crew_slots")]
			public List<CrewSlot> CrewSlots { get; set; }

			[JsonProperty("potential_rewards")]
			public List<PotentialReward> PotentialRewards { get; set; }
		}

		public partial class CrewSlot
		{
			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("skill")]
			public SkillElement Skill { get; set; }

			[JsonProperty("trait")]
			public string Trait { get; set; }
		}

		public partial class PotentialReward
		{
			[JsonProperty("type")]
			public long Type { get; set; }

			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("full_name")]
			public string FullName { get; set; }

			[JsonProperty("flavor")]
			public string Flavor { get; set; }

			[JsonProperty("icon")]
			public Icon Icon { get; set; }

			[JsonProperty("quantity")]
			public long Quantity { get; set; }

			[JsonProperty("rarity")]
			public long Rarity { get; set; }

			[JsonProperty("portrait", NullValueHandling = NullValueHandling.Ignore)]
			public IconClass Portrait { get; set; }

			[JsonProperty("full_body", NullValueHandling = NullValueHandling.Ignore)]
			public IconClass FullBody { get; set; }

			[JsonProperty("skills", NullValueHandling = NullValueHandling.Ignore)]
			public RewardSkills Skills { get; set; }

			[JsonProperty("traits", NullValueHandling = NullValueHandling.Ignore)]
			public List<string> Traits { get; set; }

			[JsonProperty("action", NullValueHandling = NullValueHandling.Ignore)]
			public ActionElement Action { get; set; }

			[JsonProperty("item_type", NullValueHandling = NullValueHandling.Ignore)]
			public long? ItemType { get; set; }
		}

		public partial class VoyageDescriptionSkills
		{
			[JsonProperty("primary_skill")]
			public SkillElement PrimarySkill { get; set; }

			[JsonProperty("secondary_skill")]
			public SkillElement SecondarySkill { get; set; }
		}

		public partial class VoyageSummaries
		{
			[JsonProperty("summaries")]
			public List<Summary> Summaries { get; set; }

			[JsonProperty("flavor_amount")]
			public long FlavorAmount { get; set; }
		}

		public partial class Summary
		{
			[JsonProperty("name")]
			public string Name { get; set; }

			[JsonProperty("min")]
			public long Min { get; set; }

			[JsonProperty("max")]
			public long Max { get; set; }
		}

		public partial class CommunityLink
		{
			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("image")]
			public CommunityLinkImage Image { get; set; }

			[JsonProperty("title")]
			public string Title { get; set; }

			[JsonProperty("date")]
			public string Date { get; set; }

			[JsonProperty("url")]
			public Uri Url { get; set; }
		}

		public partial class CommunityLinkImage
		{
			[JsonProperty("file")]
			public Uri File { get; set; }

			[JsonProperty("url")]
			public Uri Url { get; set; }

			[JsonProperty("version")]
			[JsonConverter(typeof(ParseStringConverter))]
			public long Version { get; set; }
		}

		public partial class CurrencyExchange
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("amount")]
			public long Amount { get; set; }

			[JsonProperty("output")]
			public long Output { get; set; }

			[JsonProperty("input")]
			public long Input { get; set; }

			[JsonProperty("schedule")]
			public List<long> Schedule { get; set; }

			[JsonProperty("exchanges_today")]
			public long ExchangesToday { get; set; }

			[JsonProperty("bonus", NullValueHandling = NullValueHandling.Ignore)]
			public long? Bonus { get; set; }

			[JsonProperty("limit", NullValueHandling = NullValueHandling.Ignore)]
			public long? Limit { get; set; }
		}

		public partial class Entitlements
		{
			[JsonProperty("granted")]
			public List<Granted> Granted { get; set; }

			[JsonProperty("claimed")]
			public List<Claimed> Claimed { get; set; }
		}

		public partial class Claimed
		{
			[JsonProperty("uuid")]
			public string Uuid { get; set; }

			[JsonProperty("gamerTag")]
			public long GamerTag { get; set; }

			[JsonProperty("symbol")]
			public string Symbol { get; set; }

			[JsonProperty("state")]
			public FromEnum State { get; set; }

			[JsonProperty("updated")]
			public long Updated { get; set; }

			[JsonProperty("history")]
			public List<ClaimedHistory> History { get; set; }

			[JsonProperty("specialized", NullValueHandling = NullValueHandling.Ignore)]
			public string Specialized { get; set; }

			[JsonProperty("cwin", NullValueHandling = NullValueHandling.Ignore)]
			public Cwin Cwin { get; set; }

			[JsonProperty("cwinSecsTillOpen", NullValueHandling = NullValueHandling.Ignore)]
			public long? CwinSecsTillOpen { get; set; }

			[JsonProperty("cwinSecsTillClose", NullValueHandling = NullValueHandling.Ignore)]
			public long? CwinSecsTillClose { get; set; }

			[JsonProperty("ttl", NullValueHandling = NullValueHandling.Ignore)]
			public long? Ttl { get; set; }
		}

		public partial class Cwin
		{
			[JsonProperty("open")]
			public long Open { get; set; }

			[JsonProperty("close")]
			public long Close { get; set; }
		}

		public partial class ClaimedHistory
		{
			[JsonProperty("what")]
			public FromEnum What { get; set; }

			[JsonProperty("when")]
			public DateTimeOffset When { get; set; }

			[JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
			public FromEnum? To { get; set; }

			[JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
			public FromEnum? From { get; set; }

			[JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
			[JsonConverter(typeof(ParseStringConverter))]
			public long? Quantity { get; set; }

			[JsonProperty("who", NullValueHandling = NullValueHandling.Ignore)]
			public string Who { get; set; }

			[JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
			public string Image { get; set; }

			[JsonProperty("ecount", NullValueHandling = NullValueHandling.Ignore)]
			[JsonConverter(typeof(ParseStringConverter))]
			public long? Ecount { get; set; }

			[JsonProperty("reward_image", NullValueHandling = NullValueHandling.Ignore)]
			public string RewardImage { get; set; }

			[JsonProperty("obtain", NullValueHandling = NullValueHandling.Ignore)]
			[JsonConverter(typeof(ParseStringConverter))]
			public long? Obtain { get; set; }
		}

		public partial class Granted
		{
			[JsonProperty("uuid")]
			public string Uuid { get; set; }

			[JsonProperty("gamerTag")]
			public long GamerTag { get; set; }

			[JsonProperty("symbol")]
			public GrantedSymbol Symbol { get; set; }

			[JsonProperty("state")]
			public FromEnum State { get; set; }

			[JsonProperty("updated")]
			public long Updated { get; set; }

			[JsonProperty("history")]
			public List<GrantedHistory> History { get; set; }

			[JsonProperty("specialized", NullValueHandling = NullValueHandling.Ignore)]
			public Specialized? Specialized { get; set; }
		}

		public partial class GrantedHistory
		{
			[JsonProperty("what")]
			public FromEnum What { get; set; }

			[JsonProperty("when")]
			public DateTimeOffset When { get; set; }

			[JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
			public FromEnum? To { get; set; }

			[JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
			public FromEnum? From { get; set; }

			[JsonProperty("reason", NullValueHandling = NullValueHandling.Ignore)]
			public Reason? Reason { get; set; }
		}

		public partial class Environment
		{
			[JsonProperty("tutorials")]
			public List<string> Tutorials { get; set; }

			[JsonProperty("level_requirement_123s")]
			public long LevelRequirement123S { get; set; }

			[JsonProperty("restrictions")]
			public object Restrictions { get; set; }

			[JsonProperty("flags")]
			public List<string> Flags { get; set; }

			[JsonProperty("background_idle_period")]
			public long BackgroundIdlePeriod { get; set; }

			[JsonProperty("hud_special_offer_poll_frequency")]
			public long HudSpecialOfferPollFrequency { get; set; }

			[JsonProperty("pvp_enabled")]
			public bool PvpEnabled { get; set; }

			[JsonProperty("stasis_vault_enabled")]
			public bool StasisVaultEnabled { get; set; }

			[JsonProperty("fleet_request_purge_threshold")]
			public long FleetRequestPurgeThreshold { get; set; }

			[JsonProperty("fleet_request_purge_expiration_days")]
			public long FleetRequestPurgeExpirationDays { get; set; }

			[JsonProperty("event_refresh_min_seconds")]
			public long EventRefreshMinSeconds { get; set; }

			[JsonProperty("event_refresh_max_seconds")]
			public long EventRefreshMaxSeconds { get; set; }

			[JsonProperty("squadrons_enabled")]
			public bool SquadronsEnabled { get; set; }

			[JsonProperty("honor_enabled")]
			public bool HonorEnabled { get; set; }

			[JsonProperty("force_offer_popup_at_login")]
			public bool ForceOfferPopupAtLogin { get; set; }

			[JsonProperty("adaptive_offers_enabled")]
			public bool AdaptiveOffersEnabled { get; set; }

			[JsonProperty("buy_back_enabled")]
			public bool BuyBackEnabled { get; set; }

			[JsonProperty("allow_webgl_looping_audio")]
			public bool AllowWebglLoopingAudio { get; set; }

			[JsonProperty("display_server_environment")]
			public bool DisplayServerEnvironment { get; set; }

			[JsonProperty("video_ad_campaign_limit")]
			public VideoAdCampaignLimit VideoAdCampaignLimit { get; set; }

			[JsonProperty("shuttle_rework_enabled")]
			public bool ShuttleReworkEnabled { get; set; }

			[JsonProperty("shuttle_rental_dil_cost")]
			public long ShuttleRentalDilCost { get; set; }

			[JsonProperty("gauntlet_enabled")]
			public bool GauntletEnabled { get; set; }

			[JsonProperty("location_updates_enabled")]
			public bool LocationUpdatesEnabled { get; set; }

			[JsonProperty("location_chat_enabled")]
			public bool LocationChatEnabled { get; set; }

			[JsonProperty("faction_event_order_randomized")]
			public bool FactionEventOrderRandomized { get; set; }

			[JsonProperty("fleet_activities_enabled")]
			public bool FleetActivitiesEnabled { get; set; }

			[JsonProperty("fleet_activities_restriction_enabled")]
			public bool FleetActivitiesRestrictionEnabled { get; set; }

			[JsonProperty("enable_server_toasts")]
			public bool EnableServerToasts { get; set; }

			[JsonProperty("minimum_toast_delay_in_seconds")]
			public long MinimumToastDelayInSeconds { get; set; }

			[JsonProperty("starbase_enabled")]
			public bool StarbaseEnabled { get; set; }

			[JsonProperty("voyages_enabled")]
			public bool VoyagesEnabled { get; set; }

			[JsonProperty("starbase_refresh")]
			public long StarbaseRefresh { get; set; }

			[JsonProperty("collections_enabled")]
			public bool CollectionsEnabled { get; set; }

			[JsonProperty("detect_conflict_mastery_errors")]
			public bool DetectConflictMasteryErrors { get; set; }

			[JsonProperty("reroll_enabled")]
			public bool RerollEnabled { get; set; }

			[JsonProperty("reroll_rarity_limit")]
			public long RerollRarityLimit { get; set; }

			[JsonProperty("dilithium_purchase_popup_enabled")]
			public bool DilithiumPurchasePopupEnabled { get; set; }

			[JsonProperty("dilithium_purchase_popup_threshold")]
			public long DilithiumPurchasePopupThreshold { get; set; }

			[JsonProperty("lazy_load_ui")]
			public bool LazyLoadUi { get; set; }

			[JsonProperty("help_center_button_enabled")]
			public bool HelpCenterButtonEnabled { get; set; }

			[JsonProperty("one_tap_craft_enabled")]
			public bool OneTapCraftEnabled { get; set; }

			[JsonProperty("anti_macro")]
			public AntiMacro AntiMacro { get; set; }

			[JsonProperty("dismiss_crew_from_iteminfopanel")]
			public bool DismissCrewFromIteminfopanel { get; set; }

			[JsonProperty("dismiss_all_crew_from_purchaseresultspanel")]
			public bool DismissAllCrewFromPurchaseresultspanel { get; set; }

			[JsonProperty("use_updated_speed_up_cost")]
			public bool UseUpdatedSpeedUpCost { get; set; }

			[JsonProperty("rental_shuttles_enabled")]
			public bool RentalShuttlesEnabled { get; set; }

			[JsonProperty("use_v2_activities_panel")]
			public bool UseV2ActivitiesPanel { get; set; }

			[JsonProperty("seasons_enabled")]
			public bool SeasonsEnabled { get; set; }

			[JsonProperty("load_with_equipment_rank_caching")]
			public bool LoadWithEquipmentRankCaching { get; set; }

			[JsonProperty("currency_gained_analytic_enabled")]
			public bool CurrencyGainedAnalyticEnabled { get; set; }

			[JsonProperty("fix_chroniton_ad_boost")]
			public bool FixChronitonAdBoost { get; set; }

			[JsonProperty("season_123_tier_threshold")]
			public long Season123_TierThreshold { get; set; }

			[JsonProperty("season_123_no_premium_tier_threshold")]
			public long Season123_NoPremiumTierThreshold { get; set; }

			[JsonProperty("grant_current_season_entitlement")]
			public bool GrantCurrentSeasonEntitlement { get; set; }
		}

		public partial class AntiMacro
		{
			[JsonProperty("min_minutes_to_popup")]
			public long MinMinutesToPopup { get; set; }

			[JsonProperty("variable_minutes_to_popup")]
			public long VariableMinutesToPopup { get; set; }
		}

		public partial class VideoAdCampaignLimit
		{
			[JsonProperty("master_limit")]
			public MasterLimit MasterLimit { get; set; }

			[JsonProperty("stt_rewarded_scan")]
			public MasterLimit SttRewardedScan { get; set; }

			[JsonProperty("stt_rewarded_warp")]
			public MasterLimit SttRewardedWarp { get; set; }

			[JsonProperty("stt_cadet_warp")]
			public MasterLimit SttCadetWarp { get; set; }

			[JsonProperty("stt_rewarded_shuttle")]
			public MasterLimit SttRewardedShuttle { get; set; }

			[JsonProperty("stt_rewarded_credits")]
			public MasterLimit SttRewardedCredits { get; set; }

			[JsonProperty("stt_rewarded_dabo")]
			public MasterLimit SttRewardedDabo { get; set; }

			[JsonProperty("stt_rewarded_chroniton_boost")]
			public MasterLimit SttRewardedChronitonBoost { get; set; }

			[JsonProperty("stt_rewarded_double_rewards")]
			public MasterLimit SttRewardedDoubleRewards { get; set; }
		}

		public partial class MasterLimit
		{
			[JsonProperty("chance")]
			public long Chance { get; set; }

			[JsonProperty("period_minutes")]
			public long PeriodMinutes { get; set; }
		}

		public partial class Fleet
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("nicon_index")]
			public long NiconIndex { get; set; }

			[JsonProperty("nleader_player_dbid")]
			public long NleaderPlayerDbid { get; set; }

			[JsonProperty("nstarbase_level")]
			public long NstarbaseLevel { get; set; }

			[JsonProperty("nleader_login")]
			public long NleaderLogin { get; set; }

			[JsonProperty("slabel")]
			public string Slabel { get; set; }

			[JsonProperty("cursize")]
			public long Cursize { get; set; }

			[JsonProperty("maxsize")]
			public long Maxsize { get; set; }

			[JsonProperty("created")]
			public long Created { get; set; }

			[JsonProperty("enrollment")]
			public string Enrollment { get; set; }

			[JsonProperty("nmin_level")]
			public long NminLevel { get; set; }

			[JsonProperty("rank")]
			public string Rank { get; set; }

			[JsonProperty("epoch_time")]
			public long EpochTime { get; set; }
		}

		public partial class FleetInvite
		{
			[JsonProperty("status")]
			public string Status { get; set; }

			[JsonProperty("sendable")]
			public long Sendable { get; set; }

			[JsonProperty("sent")]
			public long Sent { get; set; }

			[JsonProperty("accepted")]
			public long Accepted { get; set; }

			[JsonProperty("stores")]
			public Stores Stores { get; set; }

			[JsonProperty("received")]
			public long Received { get; set; }
		}

		public partial class Stores
		{
			[JsonProperty("SOCIAL.GUILD.INVITE")]
			public long SocialGuildInvite { get; set; }
		}

		public partial class Mailbox
		{
			[JsonProperty("status")]
			public string Status { get; set; }

			[JsonProperty("sendable")]
			public long Sendable { get; set; }

			[JsonProperty("sent")]
			public long Sent { get; set; }

			[JsonProperty("accepted")]
			public long Accepted { get; set; }

			[JsonProperty("stores")]
			public Dictionary<string, long> Stores { get; set; }

			[JsonProperty("received")]
			public long Received { get; set; }
		}

		public partial class Motd
		{
			[JsonProperty("title")]
			public string Title { get; set; }

			[JsonProperty("text")]
			public string Text { get; set; }

			[JsonProperty("priority")]
			public long Priority { get; set; }

			[JsonProperty("image")]
			public IconClass Image { get; set; }

			[JsonProperty("url")]
			public object Url { get; set; }

			[JsonProperty("additional_motds")]
			public List<object> AdditionalMotds { get; set; }
		}

		public partial class Squad
		{
			[JsonProperty("id")]
			public long Id { get; set; }

			[JsonProperty("rank")]
			public string Rank { get; set; }
		}

		public enum SkillElement { CommandSkill, DiplomacySkill, EngineeringSkill, MedicineSkill, ScienceSkill, SecuritySkill };

		public enum FullNameEnum { AdvancedReplicatorRation, Chronitons, Dilithium, FederationCredits, Honor, Merits, PremiumTimePortal };

		public enum AtlasInfo { AtlasSttIcons2Info, AtlasSttIconsInfo };

		public enum VideoAdChronitonBoostRewardSymbol { Energy, Honor, Nonpremium, Premium1XBundle, PremiumEarnable, PremiumPurchasable, ReplicatorFuelSuperrare };

		public enum Operator { Increment, Multiplier, PercentDecrease, PercentIncrease };

		public enum Source { CrewCollection, Starbase };

		public enum PurpleName { Chronitons, Credits, Dilithium, Honor, Merits, Portal, ReplicatorFuel };

		public enum TutorialState { Completed };

		public enum FromEnum { Claimed, Granted, MemberJoinSuccessAfterInviteGidSome1047137872764935, MemberJoinSuccessAfterInviteGidSome888574811693058, Reverted };

		public enum Reason { Reward };

		public enum Specialized { Premium10XBundle, Premium1XBundle, PremiumConsumables10XBundle, Standard10XBundle, StandardConsumables10XBundle, StimpackBundle, Standard1XBundle };

		public enum GrantedSymbol { GiftDirectGameItem, GuildCreate, GuildSquadCreate };

		public partial class Welcome
		{
			public static Welcome FromJson(string json)
			{
				return JsonConvert.DeserializeObject<Welcome>(json, SttUser.Converter.Settings);
			}
		}

		public static class Serialize
		{
			public static string ToJson(this Welcome self)
			{
				return JsonConvert.SerializeObject(self, SttUser.Converter.Settings);
			}
		}

		internal static class Converter
		{
			public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
			{
				MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
				DateParseHandling = DateParseHandling.None,
				Converters =
			{
				SkillElementConverter.Singleton,
				FullNameEnumConverter.Singleton,
				AtlasInfoConverter.Singleton,
				VideoAdChronitonBoostRewardSymbolConverter.Singleton,
				OperatorConverter.Singleton,
				SourceConverter.Singleton,
				PurpleNameConverter.Singleton,
				TutorialStateConverter.Singleton,
				FromEnumConverter.Singleton,
				ReasonConverter.Singleton,
				SpecializedConverter.Singleton,
				GrantedSymbolConverter.Singleton,
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
			};
		}

		internal class SkillElementConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(SkillElement) || t == typeof(SkillElement?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "command_skill":
						return SkillElement.CommandSkill;
					case "diplomacy_skill":
						return SkillElement.DiplomacySkill;
					case "engineering_skill":
						return SkillElement.EngineeringSkill;
					case "medicine_skill":
						return SkillElement.MedicineSkill;
					case "science_skill":
						return SkillElement.ScienceSkill;
					case "security_skill":
						return SkillElement.SecuritySkill;
				}
				throw new Exception("Cannot unmarshal type SkillElement");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (SkillElement)untypedValue;
				switch (value)
				{
					case SkillElement.CommandSkill:
						serializer.Serialize(writer, "command_skill");
						return;
					case SkillElement.DiplomacySkill:
						serializer.Serialize(writer, "diplomacy_skill");
						return;
					case SkillElement.EngineeringSkill:
						serializer.Serialize(writer, "engineering_skill");
						return;
					case SkillElement.MedicineSkill:
						serializer.Serialize(writer, "medicine_skill");
						return;
					case SkillElement.ScienceSkill:
						serializer.Serialize(writer, "science_skill");
						return;
					case SkillElement.SecuritySkill:
						serializer.Serialize(writer, "security_skill");
						return;
				}
				throw new Exception("Cannot marshal type SkillElement");
			}

			public static readonly SkillElementConverter Singleton = new SkillElementConverter();
		}

		internal class FullNameEnumConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(FullNameEnum) || t == typeof(FullNameEnum?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "Advanced Replicator Ration":
						return FullNameEnum.AdvancedReplicatorRation;
					case "Chronitons":
						return FullNameEnum.Chronitons;
					case "Dilithium":
						return FullNameEnum.Dilithium;
					case "Federation Credits":
						return FullNameEnum.FederationCredits;
					case "Honor":
						return FullNameEnum.Honor;
					case "Merits":
						return FullNameEnum.Merits;
					case "Premium Time Portal":
						return FullNameEnum.PremiumTimePortal;
				}
				throw new Exception("Cannot unmarshal type FullNameEnum");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (FullNameEnum)untypedValue;
				switch (value)
				{
					case FullNameEnum.AdvancedReplicatorRation:
						serializer.Serialize(writer, "Advanced Replicator Ration");
						return;
					case FullNameEnum.Chronitons:
						serializer.Serialize(writer, "Chronitons");
						return;
					case FullNameEnum.Dilithium:
						serializer.Serialize(writer, "Dilithium");
						return;
					case FullNameEnum.FederationCredits:
						serializer.Serialize(writer, "Federation Credits");
						return;
					case FullNameEnum.Honor:
						serializer.Serialize(writer, "Honor");
						return;
					case FullNameEnum.Merits:
						serializer.Serialize(writer, "Merits");
						return;
					case FullNameEnum.PremiumTimePortal:
						serializer.Serialize(writer, "Premium Time Portal");
						return;
				}
				throw new Exception("Cannot marshal type FullNameEnum");
			}

			public static readonly FullNameEnumConverter Singleton = new FullNameEnumConverter();
		}

		internal class AtlasInfoConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(AtlasInfo) || t == typeof(AtlasInfo?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "atlas_stt_icons2_info":
						return AtlasInfo.AtlasSttIcons2Info;
					case "atlas_stt_icons_info":
						return AtlasInfo.AtlasSttIconsInfo;
				}
				throw new Exception("Cannot unmarshal type AtlasInfo");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (AtlasInfo)untypedValue;
				switch (value)
				{
					case AtlasInfo.AtlasSttIcons2Info:
						serializer.Serialize(writer, "atlas_stt_icons2_info");
						return;
					case AtlasInfo.AtlasSttIconsInfo:
						serializer.Serialize(writer, "atlas_stt_icons_info");
						return;
				}
				throw new Exception("Cannot marshal type AtlasInfo");
			}

			public static readonly AtlasInfoConverter Singleton = new AtlasInfoConverter();
		}

		internal class VideoAdChronitonBoostRewardSymbolConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(VideoAdChronitonBoostRewardSymbol) || t == typeof(VideoAdChronitonBoostRewardSymbol?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "energy":
						return VideoAdChronitonBoostRewardSymbol.Energy;
					case "honor":
						return VideoAdChronitonBoostRewardSymbol.Honor;
					case "nonpremium":
						return VideoAdChronitonBoostRewardSymbol.Nonpremium;
					case "premium_1x_bundle":
						return VideoAdChronitonBoostRewardSymbol.Premium1XBundle;
					case "premium_earnable":
						return VideoAdChronitonBoostRewardSymbol.PremiumEarnable;
					case "premium_purchasable":
						return VideoAdChronitonBoostRewardSymbol.PremiumPurchasable;
					case "replicator_fuel_superrare":
						return VideoAdChronitonBoostRewardSymbol.ReplicatorFuelSuperrare;
				}
				throw new Exception("Cannot unmarshal type VideoAdChronitonBoostRewardSymbol");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (VideoAdChronitonBoostRewardSymbol)untypedValue;
				switch (value)
				{
					case VideoAdChronitonBoostRewardSymbol.Energy:
						serializer.Serialize(writer, "energy");
						return;
					case VideoAdChronitonBoostRewardSymbol.Honor:
						serializer.Serialize(writer, "honor");
						return;
					case VideoAdChronitonBoostRewardSymbol.Nonpremium:
						serializer.Serialize(writer, "nonpremium");
						return;
					case VideoAdChronitonBoostRewardSymbol.Premium1XBundle:
						serializer.Serialize(writer, "premium_1x_bundle");
						return;
					case VideoAdChronitonBoostRewardSymbol.PremiumEarnable:
						serializer.Serialize(writer, "premium_earnable");
						return;
					case VideoAdChronitonBoostRewardSymbol.PremiumPurchasable:
						serializer.Serialize(writer, "premium_purchasable");
						return;
					case VideoAdChronitonBoostRewardSymbol.ReplicatorFuelSuperrare:
						serializer.Serialize(writer, "replicator_fuel_superrare");
						return;
				}
				throw new Exception("Cannot marshal type VideoAdChronitonBoostRewardSymbol");
			}

			public static readonly VideoAdChronitonBoostRewardSymbolConverter Singleton = new VideoAdChronitonBoostRewardSymbolConverter();
		}

		internal class OperatorConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(Operator) || t == typeof(Operator?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "increment":
						return Operator.Increment;
					case "multiplier":
						return Operator.Multiplier;
					case "percent_decrease":
						return Operator.PercentDecrease;
					case "percent_increase":
						return Operator.PercentIncrease;
				}
				throw new Exception("Cannot unmarshal type Operator");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (Operator)untypedValue;
				switch (value)
				{
					case Operator.Increment:
						serializer.Serialize(writer, "increment");
						return;
					case Operator.Multiplier:
						serializer.Serialize(writer, "multiplier");
						return;
					case Operator.PercentDecrease:
						serializer.Serialize(writer, "percent_decrease");
						return;
					case Operator.PercentIncrease:
						serializer.Serialize(writer, "percent_increase");
						return;
				}
				throw new Exception("Cannot marshal type Operator");
			}

			public static readonly OperatorConverter Singleton = new OperatorConverter();
		}

		internal class SourceConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(Source) || t == typeof(Source?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "crew_collection":
						return Source.CrewCollection;
					case "starbase":
						return Source.Starbase;
				}
				throw new Exception("Cannot unmarshal type Source");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (Source)untypedValue;
				switch (value)
				{
					case Source.CrewCollection:
						serializer.Serialize(writer, "crew_collection");
						return;
					case Source.Starbase:
						serializer.Serialize(writer, "starbase");
						return;
				}
				throw new Exception("Cannot marshal type Source");
			}

			public static readonly SourceConverter Singleton = new SourceConverter();
		}

		internal class PurpleNameConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(PurpleName) || t == typeof(PurpleName?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "Chronitons":
						return PurpleName.Chronitons;
					case "Credits":
						return PurpleName.Credits;
					case "Dilithium":
						return PurpleName.Dilithium;
					case "Honor":
						return PurpleName.Honor;
					case "Merits":
						return PurpleName.Merits;
					case "Portal":
						return PurpleName.Portal;
					case "Replicator Fuel":
						return PurpleName.ReplicatorFuel;
				}
				throw new Exception("Cannot unmarshal type PurpleName");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (PurpleName)untypedValue;
				switch (value)
				{
					case PurpleName.Chronitons:
						serializer.Serialize(writer, "Chronitons");
						return;
					case PurpleName.Credits:
						serializer.Serialize(writer, "Credits");
						return;
					case PurpleName.Dilithium:
						serializer.Serialize(writer, "Dilithium");
						return;
					case PurpleName.Honor:
						serializer.Serialize(writer, "Honor");
						return;
					case PurpleName.Merits:
						serializer.Serialize(writer, "Merits");
						return;
					case PurpleName.Portal:
						serializer.Serialize(writer, "Portal");
						return;
					case PurpleName.ReplicatorFuel:
						serializer.Serialize(writer, "Replicator Fuel");
						return;
				}
				throw new Exception("Cannot marshal type PurpleName");
			}

			public static readonly PurpleNameConverter Singleton = new PurpleNameConverter();
		}

		internal class TutorialStateConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(TutorialState) || t == typeof(TutorialState?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				if (value == "completed")
				{
					return TutorialState.Completed;
				}
				throw new Exception("Cannot unmarshal type TutorialState");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (TutorialState)untypedValue;
				if (value == TutorialState.Completed)
				{
					serializer.Serialize(writer, "completed");
					return;
				}
				throw new Exception("Cannot marshal type TutorialState");
			}

			public static readonly TutorialStateConverter Singleton = new TutorialStateConverter();
		}

		internal class ParseStringConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(long) || t == typeof(long?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				long l;
				if (Int64.TryParse(value, out l))
				{
					return l;
				}
				throw new Exception("Cannot unmarshal type long");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (long)untypedValue;
				serializer.Serialize(writer, value.ToString());
				return;
			}

			public static readonly ParseStringConverter Singleton = new ParseStringConverter();
		}

		internal class FromEnumConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(FromEnum) || t == typeof(FromEnum?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "Member join success after invite {gid=Some(1047137872764935)}":
						return FromEnum.MemberJoinSuccessAfterInviteGidSome1047137872764935;
					case "Member join success after invite {gid=Some(888574811693058)}":
						return FromEnum.MemberJoinSuccessAfterInviteGidSome888574811693058;
					case "claimed":
						return FromEnum.Claimed;
					case "granted":
						return FromEnum.Granted;
					case "reverted":
						return FromEnum.Reverted;
				}
				throw new Exception("Cannot unmarshal type FromEnum");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (FromEnum)untypedValue;
				switch (value)
				{
					case FromEnum.MemberJoinSuccessAfterInviteGidSome1047137872764935:
						serializer.Serialize(writer, "Member join success after invite {gid=Some(1047137872764935)}");
						return;
					case FromEnum.MemberJoinSuccessAfterInviteGidSome888574811693058:
						serializer.Serialize(writer, "Member join success after invite {gid=Some(888574811693058)}");
						return;
					case FromEnum.Claimed:
						serializer.Serialize(writer, "claimed");
						return;
					case FromEnum.Granted:
						serializer.Serialize(writer, "granted");
						return;
					case FromEnum.Reverted:
						serializer.Serialize(writer, "reverted");
						return;
				}
				throw new Exception("Cannot marshal type FromEnum");
			}

			public static readonly FromEnumConverter Singleton = new FromEnumConverter();
		}

		internal class ReasonConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(Reason) || t == typeof(Reason?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				if (value == "reward")
				{
					return Reason.Reward;
				}
				throw new Exception("Cannot unmarshal type Reason");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (Reason)untypedValue;
				if (value == Reason.Reward)
				{
					serializer.Serialize(writer, "reward");
					return;
				}
				throw new Exception("Cannot marshal type Reason");
			}

			public static readonly ReasonConverter Singleton = new ReasonConverter();
		}

		internal class SpecializedConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(Specialized) || t == typeof(Specialized?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "premium_10x_bundle":
						return Specialized.Premium10XBundle;
					case "premium_1x_bundle":
						return Specialized.Premium1XBundle;
					case "premium_consumables_10x_bundle":
						return Specialized.PremiumConsumables10XBundle;
					case "standard_10x_bundle":
						return Specialized.Standard10XBundle;
					case "standard_consumables_10x_bundle":
						return Specialized.StandardConsumables10XBundle;
					case "stimpack_bundle":
						return Specialized.StimpackBundle;
					case "standard_1x_bundle":
						return Specialized.Standard1XBundle;
				}
				throw new Exception("Cannot unmarshal type Specialized");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (Specialized)untypedValue;
				switch (value)
				{
					case Specialized.Premium10XBundle:
						serializer.Serialize(writer, "premium_10x_bundle");
						return;
					case Specialized.Premium1XBundle:
						serializer.Serialize(writer, "premium_1x_bundle");
						return;
					case Specialized.PremiumConsumables10XBundle:
						serializer.Serialize(writer, "premium_consumables_10x_bundle");
						return;
					case Specialized.Standard10XBundle:
						serializer.Serialize(writer, "standard_10x_bundle");
						return;
					case Specialized.StandardConsumables10XBundle:
						serializer.Serialize(writer, "standard_consumables_10x_bundle");
						return;
					case Specialized.StimpackBundle:
						serializer.Serialize(writer, "stimpack_bundle");
						return;
				}
				throw new Exception("Cannot marshal type Specialized");
			}

			public static readonly SpecializedConverter Singleton = new SpecializedConverter();
		}

		internal class GrantedSymbolConverter : JsonConverter
		{
			public override bool CanConvert(Type t)
			{
				return t == typeof(GrantedSymbol) || t == typeof(GrantedSymbol?);
			}

			public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
			{
				if (reader.TokenType == JsonToken.Null)
				{
					return null;
				}

				var value = serializer.Deserialize<string>(reader);
				switch (value)
				{
					case "gift_direct_game_item":
						return GrantedSymbol.GiftDirectGameItem;
					case "guild_create":
						return GrantedSymbol.GuildCreate;
					case "guild_squad_create":
						return GrantedSymbol.GuildSquadCreate;
				}
				throw new Exception("Cannot unmarshal type GrantedSymbol");
			}

			public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
			{
				if (untypedValue == null)
				{
					serializer.Serialize(writer, null);
					return;
				}
				var value = (GrantedSymbol)untypedValue;
				switch (value)
				{
					case GrantedSymbol.GiftDirectGameItem:
						serializer.Serialize(writer, "gift_direct_game_item");
						return;
					case GrantedSymbol.GuildCreate:
						serializer.Serialize(writer, "guild_create");
						return;
					case GrantedSymbol.GuildSquadCreate:
						serializer.Serialize(writer, "guild_squad_create");
						return;
				}
				throw new Exception("Cannot marshal type GrantedSymbol");
			}

			public static readonly GrantedSymbolConverter Singleton = new GrantedSymbolConverter();
		}
	}
}
